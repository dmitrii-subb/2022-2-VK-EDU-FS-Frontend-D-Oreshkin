{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Centrifuge = void 0;\nconst subscription_1 = require(\"./subscription\");\nconst codes_1 = require(\"./codes\");\nconst transport_sockjs_1 = require(\"./transport_sockjs\");\nconst transport_websocket_1 = require(\"./transport_websocket\");\nconst transport_http_stream_1 = require(\"./transport_http_stream\");\nconst transport_sse_1 = require(\"./transport_sse\");\nconst transport_webtransport_1 = require(\"./transport_webtransport\");\nconst json_1 = require(\"./json\");\nconst utils_1 = require(\"./utils\");\nconst types_1 = require(\"./types\");\nconst events_1 = __importDefault(require(\"events\"));\nconst defaults = {\n  protocol: 'json',\n  token: null,\n  getToken: null,\n  data: null,\n  debug: false,\n  name: 'js',\n  version: '',\n  fetch: null,\n  readableStream: null,\n  websocket: null,\n  eventsource: null,\n  sockjs: null,\n  sockjsOptions: {},\n  emulationEndpoint: '/emulation',\n  minReconnectDelay: 500,\n  maxReconnectDelay: 20000,\n  timeout: 5000,\n  maxServerPingDelay: 10000\n};\n/** Centrifuge is a Centrifuge/Centrifugo bidirectional client. */\nclass Centrifuge extends events_1.default {\n  /** Constructs Centrifuge client. Call connect() method to start connecting. */\n  constructor(endpoint, options) {\n    super();\n    this._reconnectTimeout = null;\n    this._refreshTimeout = null;\n    this._serverPingTimeout = null;\n    this.state = types_1.State.Disconnected;\n    this._endpoint = endpoint;\n    this._emulation = false;\n    this._transports = [];\n    this._currentTransportIndex = 0;\n    this._triedAllTransports = false;\n    this._transportWasOpen = false;\n    this._transport = null;\n    this._transportClosed = true;\n    this._encoder = null;\n    this._decoder = null;\n    this._reconnectTimeout = null;\n    this._reconnectAttempts = 0;\n    this._client = null;\n    this._session = '';\n    this._node = '';\n    this._subs = {};\n    this._serverSubs = {};\n    this._commandId = 0;\n    this._commands = [];\n    this._batching = false;\n    this._refreshRequired = false;\n    this._refreshTimeout = null;\n    this._callbacks = {};\n    this._token = undefined;\n    this._dispatchPromise = Promise.resolve();\n    this._serverPing = 0;\n    this._serverPingTimeout = null;\n    this._sendPong = false;\n    this._promises = {};\n    this._promiseId = 0;\n    this._debugEnabled = false;\n    this._config = Object.assign(Object.assign({}, defaults), options);\n    this._configure();\n    if (this._debugEnabled) {\n      this.on('state', ctx => {\n        this._debug('client state', ctx.oldState, '->', ctx.newState);\n      });\n      this.on('error', ctx => {\n        this._debug('client error', ctx);\n      });\n    } else {\n      // Avoid unhandled exception in EventEmitter for non-set error handler.\n      this.on('error', function () {\n        Function.prototype();\n      });\n    }\n  }\n  /** newSubscription allocates new Subscription to a channel. Since server only allows\n   * one subscription per channel per client this method throws if client already has\n   * channel subscription in internal registry.\n   * */\n  newSubscription(channel, options) {\n    if (this.getSubscription(channel) !== null) {\n      throw new Error('Subscription to the channel ' + channel + ' already exists');\n    }\n    const sub = new subscription_1.Subscription(this, channel, options);\n    this._subs[channel] = sub;\n    return sub;\n  }\n  /** getSubscription returns Subscription if it's registered in the internal\n   * registry or null. */\n  getSubscription(channel) {\n    return this._getSub(channel);\n  }\n  /** removeSubscription allows removing Subcription from the internal registry. Subscrption\n   * must be in unsubscribed state. */\n  removeSubscription(sub) {\n    if (!sub) {\n      return;\n    }\n    if (sub.state !== types_1.SubscriptionState.Unsubscribed) {\n      sub.unsubscribe();\n    }\n    this._removeSubscription(sub);\n  }\n  /** Get a map with all current client-side subscriptions. */\n  subscriptions() {\n    return this._subs;\n  }\n  /** ready returns a Promise which resolves upon client goes to Connected\n   * state and rejects in case of client goes to Disconnected or Failed state.\n   * Users can provide optional timeout in milliseconds. */\n  ready(timeout) {\n    if (this.state === types_1.State.Disconnected) {\n      return Promise.reject({\n        code: codes_1.errorCodes.clientDisconnected,\n        message: 'client disconnected'\n      });\n    }\n    if (this.state === types_1.State.Connected) {\n      return Promise.resolve();\n    }\n    return new Promise((res, rej) => {\n      const ctx = {\n        resolve: res,\n        reject: rej\n      };\n      if (timeout) {\n        ctx.timeout = setTimeout(function () {\n          rej({\n            code: codes_1.errorCodes.timeout,\n            message: 'timeout'\n          });\n        }, timeout);\n      }\n      this._promises[this._nextPromiseId()] = ctx;\n    });\n  }\n  /** connect to a server. */\n  connect() {\n    if (this._isConnected()) {\n      this._debug('connect called when already connected');\n      return;\n    }\n    if (this._isConnecting()) {\n      this._debug('connect called when already connecting');\n      return;\n    }\n    this._reconnectAttempts = 0;\n    this._startConnecting();\n  }\n  /** disconnect from a server. */\n  disconnect() {\n    this._disconnect(codes_1.disconnectedCodes.disconnectCalled, 'disconnect called', false);\n  }\n  /** send asynchronous data to a server (without any response from a server\n   * expected, see rpc method if you need response). */\n  send(data) {\n    const cmd = {\n      send: {\n        data: data\n      }\n    };\n    const self = this;\n    return this._methodCall().then(function () {\n      const sent = self._transportSendCommands([cmd]); // can send message to server without id set\n      if (!sent) {\n        return Promise.reject(self._createErrorObject(codes_1.errorCodes.transportWriteError, 'transport write error'));\n      }\n      return Promise.resolve();\n    });\n  }\n  /** rpc to a server - i.e. a call which waits for a response with data. */\n  rpc(method, data) {\n    const cmd = {\n      rpc: {\n        method: method,\n        data: data\n      }\n    };\n    const self = this;\n    return this._methodCall().then(function () {\n      return self._callPromise(cmd, function (reply) {\n        return {\n          'data': reply.rpc.data\n        };\n      });\n    });\n  }\n  /** publish data to a channel. */\n  publish(channel, data) {\n    const cmd = {\n      publish: {\n        channel: channel,\n        data: data\n      }\n    };\n    const self = this;\n    return this._methodCall().then(function () {\n      return self._callPromise(cmd, function () {\n        return {};\n      });\n    });\n  }\n  /** history for a channel. By default it does not return publications (only current\n   *  StreamPosition data) â€“ provide an explicit limit > 0 to load publications.*/\n  history(channel, options) {\n    const cmd = {\n      history: this._getHistoryRequest(channel, options)\n    };\n    const self = this;\n    return this._methodCall().then(function () {\n      return self._callPromise(cmd, function (reply) {\n        const result = reply.history;\n        const publications = [];\n        if (result.publications) {\n          for (let i = 0; i < result.publications.length; i++) {\n            publications.push(self._getPublicationContext(channel, result.publications[i]));\n          }\n        }\n        return {\n          'publications': publications,\n          'epoch': result.epoch || '',\n          'offset': result.offset || 0\n        };\n      });\n    });\n  }\n  /** presence for a channel. */\n  presence(channel) {\n    const cmd = {\n      presence: {\n        channel: channel\n      }\n    };\n    const self = this;\n    return this._methodCall().then(function () {\n      return self._callPromise(cmd, function (reply) {\n        return {\n          'clients': reply.presence.presence\n        };\n      });\n    });\n  }\n  /** presence stats for a channel. */\n  presenceStats(channel) {\n    const cmd = {\n      'presence_stats': {\n        channel: channel\n      }\n    };\n    const self = this;\n    return this._methodCall().then(function () {\n      return self._callPromise(cmd, function (reply) {\n        const result = reply.presence_stats;\n        return {\n          'numUsers': result.num_users,\n          'numClients': result.num_clients\n        };\n      });\n    });\n  }\n  /** start command batching (collect into temporary buffer without sending to a server)\n   * until stopBatching called.*/\n  startBatching() {\n    // start collecting messages without sending them to Centrifuge until flush\n    // method called\n    this._batching = true;\n  }\n  /** stop batching commands and flush collected commands to the\n   * network (all in one request/frame).*/\n  stopBatching() {\n    const self = this;\n    // Why so nested? Two levels here requred to deal with promise resolving queue.\n    // In Subscription case we wait 2 futures before sending data to connection.\n    // Otherwise _batching becomes false before batching decision has a chance to be executed.\n    Promise.resolve().then(function () {\n      Promise.resolve().then(function () {\n        self._batching = false;\n        self._flush();\n      });\n    });\n  }\n  _debug() {\n    if (!this._debugEnabled) {\n      return;\n    }\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    (0, utils_1.log)('debug', args);\n  }\n  /** @internal */\n  _setFormat(format) {\n    if (this._formatOverride(format)) {\n      return;\n    }\n    if (format === 'protobuf') {\n      throw new Error('not implemented by JSON-only Centrifuge client, use client with Protobuf support');\n    }\n    this._encoder = new json_1.JsonEncoder();\n    this._decoder = new json_1.JsonDecoder();\n  }\n  /** @internal */\n  _formatOverride(_format) {\n    return false;\n  }\n  _configure() {\n    if (!('Promise' in globalThis)) {\n      throw new Error('Promise polyfill required');\n    }\n    if (!this._endpoint) {\n      throw new Error('endpoint configuration required');\n    }\n    if (this._config.protocol !== 'json' && this._config.protocol !== 'protobuf') {\n      throw new Error('unsupported protocol ' + this._config.protocol);\n    }\n    if (this._config.token !== null) {\n      this._token = this._config.token;\n    }\n    this._setFormat('json');\n    if (this._config.protocol === 'protobuf') {\n      this._setFormat('protobuf');\n    }\n    if (this._config.debug === true || typeof localStorage !== 'undefined' && localStorage.getItem('centrifuge.debug')) {\n      this._debugEnabled = true;\n    }\n    this._debug('config', this._config);\n    if (typeof this._endpoint === 'string') {\n      // Single address.\n    } else if (typeof this._endpoint === 'object' && this._endpoint instanceof Array) {\n      this._transports = this._endpoint;\n      this._emulation = true;\n      for (const i in this._transports) {\n        const transportConfig = this._transports[i];\n        if (!transportConfig.endpoint || !transportConfig.transport) {\n          throw new Error('malformed transport configuration');\n        }\n        const transportName = transportConfig.transport;\n        if (['websocket', 'http_stream', 'sse', 'sockjs', 'webtransport'].indexOf(transportName) < 0) {\n          throw new Error('unsupported transport name: ' + transportName);\n        }\n      }\n    } else {\n      throw new Error('unsupported url configuration type: only string or array of objects are supported');\n    }\n  }\n  _setState(newState) {\n    if (this.state !== newState) {\n      const oldState = this.state;\n      this.state = newState;\n      this.emit('state', {\n        newState,\n        oldState\n      });\n      return true;\n    }\n    return false;\n  }\n  _isDisconnected() {\n    return this.state === types_1.State.Disconnected;\n  }\n  _isConnecting() {\n    return this.state === types_1.State.Connecting;\n  }\n  _isConnected() {\n    return this.state === types_1.State.Connected;\n  }\n  _nextCommandId() {\n    return ++this._commandId;\n  }\n  _getReconnectDelay() {\n    const delay = (0, utils_1.backoff)(this._reconnectAttempts, this._config.minReconnectDelay, this._config.maxReconnectDelay);\n    this._reconnectAttempts += 1;\n    return delay;\n  }\n  _clearOutgoingRequests() {\n    // fire errbacks of registered outgoing calls.\n    for (const id in this._callbacks) {\n      if (this._callbacks.hasOwnProperty(id)) {\n        const callbacks = this._callbacks[id];\n        clearTimeout(callbacks.timeout);\n        const errback = callbacks.errback;\n        if (!errback) {\n          continue;\n        }\n        errback({\n          error: this._createErrorObject(codes_1.errorCodes.connectionClosed, 'connection closed')\n        });\n      }\n    }\n    this._callbacks = {};\n  }\n  _clearConnectedState() {\n    this._client = null;\n    this._clearServerPingTimeout();\n    this._clearRefreshTimeout();\n    // fire events for client-side subscriptions.\n    for (const channel in this._subs) {\n      if (!this._subs.hasOwnProperty(channel)) {\n        continue;\n      }\n      const sub = this._subs[channel];\n      if (sub.state === types_1.SubscriptionState.Subscribed) {\n        // @ts-ignore â€“ we are hiding some symbols from public API autocompletion.\n        sub._setSubscribing(codes_1.subscribingCodes.transportClosed, 'transport closed');\n      }\n    }\n    // fire events for server-side subscriptions.\n    for (const channel in this._serverSubs) {\n      if (this._serverSubs.hasOwnProperty(channel)) {\n        this.emit('subscribing', {\n          channel: channel\n        });\n      }\n    }\n  }\n  _handleWriteError(commands) {\n    for (const command of commands) {\n      const id = command.id;\n      if (!(id in this._callbacks)) {\n        continue;\n      }\n      const callbacks = this._callbacks[id];\n      clearTimeout(this._callbacks[id].timeout);\n      delete this._callbacks[id];\n      const errback = callbacks.errback;\n      errback({\n        error: this._createErrorObject(codes_1.errorCodes.transportWriteError, 'transport write error')\n      });\n    }\n  }\n  _transportSendCommands(commands) {\n    if (!commands.length) {\n      return true;\n    }\n    if (!this._transport) {\n      return false;\n    }\n    try {\n      this._transport.send(this._encoder.encodeCommands(commands), this._session, this._node);\n    } catch (e) {\n      this._debug('error writing commands', e);\n      this._handleWriteError(commands);\n      return false;\n    }\n    return true;\n  }\n  _initializeTransport() {\n    let websocket;\n    if (this._config.websocket !== null) {\n      websocket = this._config.websocket;\n    } else {\n      if (!(typeof globalThis.WebSocket !== 'function' && typeof globalThis.WebSocket !== 'object')) {\n        websocket = globalThis.WebSocket;\n      }\n    }\n    let sockjs = null;\n    if (this._config.sockjs !== null) {\n      sockjs = this._config.sockjs;\n    } else {\n      if (typeof globalThis.SockJS !== 'undefined') {\n        sockjs = globalThis.SockJS;\n      }\n    }\n    let eventsource = null;\n    if (this._config.eventsource !== null) {\n      eventsource = this._config.eventsource;\n    } else {\n      if (typeof globalThis.EventSource !== 'undefined') {\n        eventsource = globalThis.EventSource;\n      }\n    }\n    let fetchFunc = null;\n    if (this._config.fetch !== null) {\n      fetchFunc = this._config.fetch;\n    } else {\n      if (typeof globalThis.fetch !== 'undefined') {\n        fetchFunc = globalThis.fetch;\n      }\n    }\n    let readableStream = null;\n    if (this._config.readableStream !== null) {\n      readableStream = this._config.readableStream;\n    } else {\n      if (typeof globalThis.ReadableStream !== 'undefined') {\n        readableStream = globalThis.ReadableStream;\n      }\n    }\n    if (!this._emulation) {\n      if ((0, utils_1.startsWith)(this._endpoint, 'http')) {\n        throw new Error('Provide explicit transport endpoints configuration in case of using HTTP (i.e. using array of TransportEndpoint instead of a single string), or use ws(s):// scheme in an endpoint if you aimed using WebSocket transport');\n      } else {\n        this._debug('client will use websocket');\n        this._transport = new transport_websocket_1.WebsocketTransport(this._endpoint, {\n          websocket: websocket\n        });\n        if (!this._transport.supported()) {\n          throw new Error('WebSocket not available');\n        }\n      }\n    } else {\n      if (this._currentTransportIndex >= this._transports.length) {\n        this._triedAllTransports = true;\n        this._currentTransportIndex = 0;\n      }\n      let count = 0;\n      while (true) {\n        if (count >= this._transports.length) {\n          throw new Error('no supported transport found');\n        }\n        const transportConfig = this._transports[this._currentTransportIndex];\n        const transportName = transportConfig.transport;\n        const transportEndpoint = transportConfig.endpoint;\n        if (transportName === 'websocket') {\n          this._debug('trying websocket transport');\n          this._transport = new transport_websocket_1.WebsocketTransport(transportEndpoint, {\n            websocket: websocket\n          });\n          if (!this._transport.supported()) {\n            this._debug('websocket transport not available');\n            this._currentTransportIndex++;\n            count++;\n            continue;\n          }\n        } else if (transportName === 'webtransport') {\n          this._debug('trying webtransport transport');\n          this._transport = new transport_webtransport_1.WebtransportTransport(transportEndpoint, {\n            webtransport: globalThis.WebTransport,\n            decoder: this._decoder,\n            encoder: this._encoder\n          });\n          if (!this._transport.supported()) {\n            this._debug('webtransport transport not available');\n            this._currentTransportIndex++;\n            count++;\n            continue;\n          }\n        } else if (transportName === 'http_stream') {\n          this._debug('trying http_stream transport');\n          this._transport = new transport_http_stream_1.HttpStreamTransport(transportEndpoint, {\n            fetch: fetchFunc,\n            readableStream: readableStream,\n            emulationEndpoint: this._config.emulationEndpoint,\n            decoder: this._decoder,\n            encoder: this._encoder\n          });\n          if (!this._transport.supported()) {\n            this._debug('http_stream transport not available');\n            this._currentTransportIndex++;\n            count++;\n            continue;\n          }\n        } else if (transportName === 'sse') {\n          this._debug('trying sse transport');\n          this._transport = new transport_sse_1.SseTransport(transportEndpoint, {\n            eventsource: eventsource,\n            fetch: fetchFunc,\n            emulationEndpoint: this._config.emulationEndpoint\n          });\n          if (!this._transport.supported()) {\n            this._debug('sse transport not available');\n            this._currentTransportIndex++;\n            count++;\n            continue;\n          }\n        } else if (transportName === 'sockjs') {\n          this._debug('trying sockjs');\n          this._transport = new transport_sockjs_1.SockjsTransport(transportEndpoint, {\n            sockjs: sockjs,\n            sockjsOptions: this._config.sockjsOptions\n          });\n          if (!this._transport.supported()) {\n            this._debug('sockjs transport not available');\n            this._currentTransportIndex++;\n            count++;\n            continue;\n          }\n        } else {\n          throw new Error('unknown transport ' + transportName);\n        }\n        break;\n      }\n    }\n    const self = this;\n    let transportName;\n    let wasOpen = false;\n    let optimistic = true;\n    if (this._transport.name() === 'sse') {\n      // Avoid using optimistic subscriptions with SSE/EventSource as we are sending\n      // initial data in URL params. URL is recommended to be 2048 chars max â€“ so adding\n      // subscription data may be risky.\n      optimistic = false;\n    }\n    const initialCommands = [];\n    if (this._transport.emulation()) {\n      const connectCommand = self._sendConnect(true);\n      initialCommands.push(connectCommand);\n      if (optimistic) {\n        const subscribeCommands = self._sendSubscribeCommands(true, true);\n        for (const i in subscribeCommands) {\n          initialCommands.push(subscribeCommands[i]);\n        }\n      }\n    }\n    const initialData = this._encoder.encodeCommands(initialCommands);\n    this._transport.initialize(this._config.protocol, {\n      onOpen: function () {\n        wasOpen = true;\n        transportName = self._transport.subName();\n        self._debug(transportName, 'transport open');\n        self._transportWasOpen = true;\n        self._transportClosed = false;\n        if (self._transport.emulation()) {\n          return;\n        }\n        self.startBatching();\n        self._sendConnect(false);\n        if (optimistic) {\n          self._sendSubscribeCommands(true, false);\n        }\n        self.stopBatching();\n      },\n      onError: function (e) {\n        self._debug('transport level error', e);\n      },\n      onClose: function (closeEvent) {\n        self._debug(self._transport.name(), 'transport closed');\n        self._transportClosed = true;\n        let reason = 'connection closed';\n        let needReconnect = true;\n        let code = 0;\n        if (closeEvent && 'code' in closeEvent && closeEvent.code) {\n          code = closeEvent.code;\n        }\n        if (closeEvent && closeEvent.reason) {\n          try {\n            const advice = JSON.parse(closeEvent.reason);\n            reason = advice.reason;\n            needReconnect = advice.reconnect;\n          } catch (e) {\n            reason = closeEvent.reason;\n            if (code >= 3500 && code < 4000 || code >= 4500 && code < 5000) {\n              needReconnect = false;\n            }\n          }\n        }\n        if (code < 3000) {\n          if (code === 1009) {\n            code = codes_1.disconnectedCodes.messageSizeLimit;\n            reason = 'message size limit exceeded';\n            needReconnect = false;\n          } else {\n            code = codes_1.connectingCodes.transportClosed;\n            reason = 'transport closed';\n          }\n          if (self._emulation && !self._transportWasOpen) {\n            self._currentTransportIndex++;\n            if (self._currentTransportIndex >= self._transports.length) {\n              self._triedAllTransports = true;\n              self._currentTransportIndex = 0;\n            }\n          }\n        } else {\n          // Codes >= 3000 are sent from a server application level.\n          self._transportWasOpen = true;\n        }\n        let isInitialHandshake = false;\n        if (self._emulation && !self._transportWasOpen && !self._triedAllTransports) {\n          isInitialHandshake = true;\n        }\n        if (self._isConnecting() && !wasOpen) {\n          self.emit('error', {\n            type: 'transport',\n            error: {\n              code: codes_1.errorCodes.transportClosed,\n              message: 'transport closed'\n            },\n            transport: self._transport.name()\n          });\n        }\n        self._disconnect(code, reason, needReconnect);\n        if (self._isConnecting()) {\n          let delay = self._getReconnectDelay();\n          if (isInitialHandshake) {\n            delay = 0;\n          }\n          self._debug('reconnect after ' + delay + ' milliseconds');\n          self._reconnectTimeout = setTimeout(() => {\n            self._startReconnecting();\n          }, delay);\n        }\n      },\n      onMessage: function (data) {\n        self._dataReceived(data);\n      }\n    }, initialData);\n  }\n  _sendConnect(skipSending) {\n    const connectCommand = this._constructConnectCommand();\n    const self = this;\n    this._call(connectCommand, skipSending).then(resolveCtx => {\n      // @ts-ignore = improve later.\n      const result = resolveCtx.reply.connect;\n      self._connectResponse(result);\n      // @ts-ignore - improve later.\n      if (resolveCtx.next) {\n        // @ts-ignore - improve later.\n        resolveCtx.next();\n      }\n    }, rejectCtx => {\n      self._connectError(rejectCtx.error);\n      if (rejectCtx.next) {\n        rejectCtx.next();\n      }\n    });\n    return connectCommand;\n  }\n  _startReconnecting() {\n    if (!this._isConnecting()) {\n      return;\n    }\n    const needTokenRefresh = this._refreshRequired || !this._token && this._config.getToken !== null;\n    if (!needTokenRefresh) {\n      this._initializeTransport();\n      return;\n    }\n    const self = this;\n    this._getToken().then(function (token) {\n      if (!self._isConnecting()) {\n        return;\n      }\n      if (!token) {\n        self._failUnauthorized();\n        return;\n      }\n      self._token = token;\n      self._debug('connection token refreshed');\n      self._initializeTransport();\n    }).catch(function (e) {\n      if (!self._isConnecting()) {\n        return;\n      }\n      self.emit('error', {\n        'type': 'connectToken',\n        'error': {\n          code: codes_1.errorCodes.clientConnectToken,\n          message: e !== undefined ? e.toString() : ''\n        }\n      });\n      const delay = self._getReconnectDelay();\n      self._debug('error on connection token refresh, reconnect after ' + delay + ' milliseconds', e);\n      self._reconnectTimeout = setTimeout(() => {\n        self._startReconnecting();\n      }, delay);\n    });\n  }\n  _connectError(err) {\n    if (this.state !== types_1.State.Connecting) {\n      return;\n    }\n    if (err.code === 109) {\n      // token expired.\n      // next connect attempt will try to refresh token.\n      this._refreshRequired = true;\n    }\n    if (err.code < 100 || err.temporary === true || err.code === 109) {\n      this.emit('error', {\n        'type': 'connect',\n        'error': err\n      });\n      // Not yet connected, closing transport is enough.\n      if (this._transport && !this._transportClosed) {\n        this._transportClosed = true;\n        this._transport.close();\n      }\n    } else {\n      this._disconnect(err.code, err.message, false);\n    }\n  }\n  _constructConnectCommand() {\n    const req = {};\n    if (this._token) {\n      req.token = this._token;\n    }\n    if (this._config.data) {\n      req.data = this._config.data;\n    }\n    if (this._config.name) {\n      req.name = this._config.name;\n    }\n    if (this._config.version) {\n      req.version = this._config.version;\n    }\n    const subs = {};\n    let hasSubs = false;\n    for (const channel in this._serverSubs) {\n      if (this._serverSubs.hasOwnProperty(channel) && this._serverSubs[channel].recoverable) {\n        hasSubs = true;\n        const sub = {\n          'recover': true\n        };\n        if (this._serverSubs[channel].offset) {\n          sub['offset'] = this._serverSubs[channel].offset;\n        }\n        if (this._serverSubs[channel].epoch) {\n          sub['epoch'] = this._serverSubs[channel].epoch;\n        }\n        subs[channel] = sub;\n      }\n    }\n    if (hasSubs) {\n      req.subs = subs;\n    }\n    return {\n      connect: req\n    };\n  }\n  _getHistoryRequest(channel, options) {\n    const req = {\n      channel: channel\n    };\n    if (options !== undefined) {\n      if (options.since) {\n        req.since = {\n          offset: options.since.offset\n        };\n        if (options.since.epoch) {\n          req.since.epoch = options.since.epoch;\n        }\n      }\n      if (options.limit !== undefined) {\n        req.limit = options.limit;\n      }\n      if (options.reverse === true) {\n        req.reverse = true;\n      }\n    }\n    return req;\n  }\n  _methodCall() {\n    if (this._isConnected()) {\n      return Promise.resolve();\n    }\n    return new Promise((res, rej) => {\n      const timeout = setTimeout(function () {\n        rej({\n          code: codes_1.errorCodes.timeout,\n          message: 'timeout'\n        });\n      }, this._config.timeout);\n      this._promises[this._nextPromiseId()] = {\n        timeout: timeout,\n        resolve: res,\n        reject: rej\n      };\n    });\n  }\n  _callPromise(cmd, resultCB) {\n    return new Promise((resolve, reject) => {\n      this._call(cmd, false).then(resolveCtx => {\n        // @ts-ignore - improve later.\n        resolve(resultCB(resolveCtx.reply));\n        // @ts-ignore - improve later.\n        if (resolveCtx.next) {\n          // @ts-ignore - improve later.\n          resolveCtx.next();\n        }\n      }, rejectCtx => {\n        reject(rejectCtx.error);\n        if (rejectCtx.next) {\n          rejectCtx.next();\n        }\n      });\n    });\n  }\n  _dataReceived(data) {\n    if (this._serverPing > 0) {\n      this._waitServerPing();\n    }\n    const replies = this._decoder.decodeReplies(data);\n    // We have to guarantee order of events in replies processing - i.e. start processing\n    // next reply only when we finished processing of current one. Without syncing things in\n    // this way we could get wrong publication events order as reply promises resolve\n    // on next loop tick so for loop continues before we finished emitting all reply events.\n    this._dispatchPromise = this._dispatchPromise.then(() => {\n      let finishDispatch;\n      this._dispatchPromise = new Promise(resolve => {\n        finishDispatch = resolve;\n      });\n      this._dispatchSynchronized(replies, finishDispatch);\n    });\n  }\n  _dispatchSynchronized(replies, finishDispatch) {\n    let p = Promise.resolve();\n    for (const i in replies) {\n      if (replies.hasOwnProperty(i)) {\n        p = p.then(() => {\n          return this._dispatchReply(replies[i]);\n        });\n      }\n    }\n    p = p.then(() => {\n      finishDispatch();\n    });\n  }\n  _dispatchReply(reply) {\n    let next;\n    const p = new Promise(resolve => {\n      next = resolve;\n    });\n    if (reply === undefined || reply === null) {\n      this._debug('dispatch: got undefined or null reply');\n      next();\n      return p;\n    }\n    const id = reply.id;\n    if (id && id > 0) {\n      this._handleReply(reply, next);\n    } else {\n      if (!reply.push) {\n        this._handleServerPing(next);\n      } else {\n        this._handlePush(reply.push, next);\n      }\n    }\n    return p;\n  }\n  _call(cmd, skipSending) {\n    return new Promise((resolve, reject) => {\n      cmd.id = this._nextCommandId();\n      this._registerCall(cmd.id, resolve, reject);\n      if (!skipSending) {\n        this._addCommand(cmd);\n      }\n    });\n  }\n  _startConnecting() {\n    this._debug('start connecting');\n    if (this._setState(types_1.State.Connecting)) {\n      this.emit('connecting', {\n        code: codes_1.connectingCodes.connectCalled,\n        reason: 'connect called'\n      });\n    }\n    this._client = null;\n    this._startReconnecting();\n  }\n  _disconnect(code, reason, reconnect) {\n    if (this._isDisconnected()) {\n      return;\n    }\n    const previousState = this.state;\n    const ctx = {\n      code: code,\n      reason: reason\n    };\n    let needEvent = false;\n    if (reconnect) {\n      needEvent = this._setState(types_1.State.Connecting);\n    } else {\n      needEvent = this._setState(types_1.State.Disconnected);\n      this._rejectPromises({\n        code: codes_1.errorCodes.clientDisconnected,\n        message: 'disconnected'\n      });\n    }\n    this._clearOutgoingRequests();\n    if (previousState === types_1.State.Connecting) {\n      this._clearReconnectTimeout();\n    }\n    if (previousState === types_1.State.Connected) {\n      this._clearConnectedState();\n    }\n    if (needEvent) {\n      if (this._isConnecting()) {\n        this.emit('connecting', ctx);\n      } else {\n        this.emit('disconnected', ctx);\n      }\n    }\n    if (this._transport && !this._transportClosed) {\n      this._transportClosed = true;\n      this._transport.close();\n    }\n  }\n  _failUnauthorized() {\n    this._disconnect(codes_1.disconnectedCodes.unauthorized, 'unauthorized', false);\n  }\n  _getToken() {\n    this._debug('get connection token');\n    if (!this._config.getToken) {\n      throw new Error('provide a function to get connection token');\n    }\n    return this._config.getToken({});\n  }\n  _refresh() {\n    const clientId = this._client;\n    const self = this;\n    this._getToken().then(function (token) {\n      if (clientId !== self._client) {\n        return;\n      }\n      if (!token) {\n        self._failUnauthorized();\n        return;\n      }\n      self._token = token;\n      self._debug('connection token refreshed');\n      if (!self._isConnected()) {\n        return;\n      }\n      const cmd = {\n        refresh: {\n          token: self._token\n        }\n      };\n      self._call(cmd, false).then(resolveCtx => {\n        // @ts-ignore - improve later.\n        const result = resolveCtx.reply.refresh;\n        self._refreshResponse(result);\n        // @ts-ignore - improve later.\n        if (resolveCtx.next) {\n          // @ts-ignore - improve later.\n          resolveCtx.next();\n        }\n      }, rejectCtx => {\n        self._refreshError(rejectCtx.error);\n        if (rejectCtx.next) {\n          rejectCtx.next();\n        }\n      });\n    }).catch(function (e) {\n      self.emit('error', {\n        type: 'refreshToken',\n        error: {\n          code: codes_1.errorCodes.clientRefreshToken,\n          message: e !== undefined ? e.toString() : ''\n        }\n      });\n      self._refreshTimeout = setTimeout(() => self._refresh(), self._getRefreshRetryDelay());\n    });\n  }\n  _refreshError(err) {\n    if (err.code < 100 || err.temporary === true) {\n      this.emit('error', {\n        type: 'refresh',\n        error: err\n      });\n      this._refreshTimeout = setTimeout(() => this._refresh(), this._getRefreshRetryDelay());\n    } else {\n      this._disconnect(err.code, err.message, false);\n    }\n  }\n  _getRefreshRetryDelay() {\n    return (0, utils_1.backoff)(0, 5000, 10000);\n  }\n  _refreshResponse(result) {\n    if (this._refreshTimeout) {\n      clearTimeout(this._refreshTimeout);\n      this._refreshTimeout = null;\n    }\n    if (result.expires) {\n      this._client = result.client;\n      this._refreshTimeout = setTimeout(() => this._refresh(), (0, utils_1.ttlMilliseconds)(result.ttl));\n    }\n  }\n  _removeSubscription(sub) {\n    if (sub === null) {\n      return;\n    }\n    delete this._subs[sub.channel];\n  }\n  _unsubscribe(sub) {\n    if (!this._isConnected()) {\n      return;\n    }\n    const req = {\n      channel: sub.channel\n    };\n    const cmd = {\n      unsubscribe: req\n    };\n    const self = this;\n    this._call(cmd, false).then(resolveCtx => {\n      // @ts-ignore - improve later.\n      if (resolveCtx.next) {\n        // @ts-ignore - improve later.\n        resolveCtx.next();\n      }\n    }, rejectCtx => {\n      if (rejectCtx.next) {\n        rejectCtx.next();\n      }\n      self._disconnect(codes_1.connectingCodes.unsubscribeError, 'unsubscribe error', true);\n    });\n  }\n  _getSub(channel) {\n    const sub = this._subs[channel];\n    if (!sub) {\n      return null;\n    }\n    return sub;\n  }\n  _isServerSub(channel) {\n    return this._serverSubs[channel] !== undefined;\n  }\n  _sendSubscribeCommands(optimistic, skipSending) {\n    const commands = [];\n    for (const channel in this._subs) {\n      if (!this._subs.hasOwnProperty(channel)) {\n        continue;\n      }\n      const sub = this._subs[channel];\n      // @ts-ignore â€“ we are hiding some symbols from public API autocompletion.\n      if (sub._inflight === true) {\n        continue;\n      }\n      if (sub.state === types_1.SubscriptionState.Subscribing) {\n        // @ts-ignore â€“ we are hiding some symbols from public API autocompletion.\n        const cmd = sub._subscribe(optimistic, skipSending);\n        if (cmd) {\n          commands.push(cmd);\n        }\n      }\n    }\n    return commands;\n  }\n  _connectResponse(result) {\n    this._transportWasOpen = true;\n    this._reconnectAttempts = 0;\n    this._refreshRequired = false;\n    if (this._isConnected()) {\n      return;\n    }\n    this._client = result.client;\n    this._setState(types_1.State.Connected);\n    if (this._refreshTimeout) {\n      clearTimeout(this._refreshTimeout);\n    }\n    if (result.expires) {\n      this._refreshTimeout = setTimeout(() => this._refresh(), (0, utils_1.ttlMilliseconds)(result.ttl));\n    }\n    this._session = result.session;\n    this._node = result.node;\n    this.startBatching();\n    this._sendSubscribeCommands(false, false);\n    this.stopBatching();\n    const ctx = {\n      client: result.client,\n      transport: this._transport.subName()\n    };\n    if (result.data) {\n      ctx.data = result.data;\n    }\n    this.emit('connected', ctx);\n    this._resolvePromises();\n    this._processServerSubs(result.subs || {});\n    if (result.ping && result.ping > 0) {\n      this._serverPing = result.ping * 1000;\n      this._sendPong = result.pong === true;\n      this._waitServerPing();\n    } else {\n      this._serverPing = 0;\n    }\n  }\n  _processServerSubs(subs) {\n    for (const channel in subs) {\n      if (!subs.hasOwnProperty(channel)) {\n        continue;\n      }\n      const sub = subs[channel];\n      this._serverSubs[channel] = {\n        'offset': sub.offset,\n        'epoch': sub.epoch,\n        'recoverable': sub.recoverable || false\n      };\n      const subCtx = this._getSubscribeContext(channel, sub);\n      this.emit('subscribed', subCtx);\n    }\n    for (const channel in subs) {\n      if (!subs.hasOwnProperty(channel)) {\n        continue;\n      }\n      const sub = subs[channel];\n      if (sub.recovered) {\n        const pubs = sub.publications;\n        if (pubs && pubs.length > 0) {\n          for (const i in pubs) {\n            if (pubs.hasOwnProperty(i)) {\n              this._handlePublication(channel, pubs[i]);\n            }\n          }\n        }\n      }\n    }\n    for (const channel in this._serverSubs) {\n      if (!this._serverSubs.hasOwnProperty(channel)) {\n        continue;\n      }\n      if (!subs[channel]) {\n        this.emit('unsubscribed', {\n          channel: channel\n        });\n        delete this._serverSubs[channel];\n      }\n    }\n  }\n  _clearRefreshTimeout() {\n    if (this._refreshTimeout !== null) {\n      clearTimeout(this._refreshTimeout);\n      this._refreshTimeout = null;\n    }\n  }\n  _clearReconnectTimeout() {\n    if (this._reconnectTimeout !== null) {\n      clearTimeout(this._reconnectTimeout);\n      this._reconnectTimeout = null;\n    }\n  }\n  _clearServerPingTimeout() {\n    if (this._serverPingTimeout !== null) {\n      clearTimeout(this._serverPingTimeout);\n      this._serverPingTimeout = null;\n    }\n  }\n  _waitServerPing() {\n    if (this._config.maxServerPingDelay === 0) {\n      return;\n    }\n    if (!this._isConnected()) {\n      return;\n    }\n    this._clearServerPingTimeout();\n    this._serverPingTimeout = setTimeout(() => {\n      if (!this._isConnected()) {\n        return;\n      }\n      this._disconnect(codes_1.connectingCodes.noPing, 'no ping', true);\n    }, this._serverPing + this._config.maxServerPingDelay);\n  }\n  _getSubscribeContext(channel, result) {\n    const ctx = {\n      channel: channel,\n      positioned: false,\n      recoverable: false,\n      wasRecovering: false,\n      recovered: false\n    };\n    if (result.recovered) {\n      ctx.recovered = true;\n    }\n    if (result.positioned) {\n      ctx.positioned = true;\n    }\n    if (result.recoverable) {\n      ctx.recoverable = true;\n    }\n    if (result.was_recovering) {\n      ctx.wasRecovering = true;\n    }\n    let epoch = '';\n    if ('epoch' in result) {\n      epoch = result.epoch;\n    }\n    let offset = 0;\n    if ('offset' in result) {\n      offset = result.offset;\n    }\n    if (ctx.positioned || ctx.recoverable) {\n      ctx.streamPosition = {\n        'offset': offset,\n        'epoch': epoch\n      };\n    }\n    if (result.data) {\n      ctx.data = result.data;\n    }\n    return ctx;\n  }\n  _handleReply(reply, next) {\n    const id = reply.id;\n    if (!(id in this._callbacks)) {\n      next();\n      return;\n    }\n    const callbacks = this._callbacks[id];\n    clearTimeout(this._callbacks[id].timeout);\n    delete this._callbacks[id];\n    if (!(0, utils_1.errorExists)(reply)) {\n      const callback = callbacks.callback;\n      if (!callback) {\n        return;\n      }\n      callback({\n        reply,\n        next\n      });\n    } else {\n      const errback = callbacks.errback;\n      if (!errback) {\n        next();\n        return;\n      }\n      const error = reply.error;\n      errback({\n        error,\n        next\n      });\n    }\n  }\n  _handleJoin(channel, join) {\n    const sub = this._getSub(channel);\n    if (!sub) {\n      if (this._isServerSub(channel)) {\n        const ctx = {\n          channel: channel,\n          info: this._getJoinLeaveContext(join.info)\n        };\n        this.emit('join', ctx);\n      }\n      return;\n    }\n    // @ts-ignore â€“ we are hiding some symbols from public API autocompletion.\n    sub._handleJoin(join);\n  }\n  _handleLeave(channel, leave) {\n    const sub = this._getSub(channel);\n    if (!sub) {\n      if (this._isServerSub(channel)) {\n        const ctx = {\n          channel: channel,\n          info: this._getJoinLeaveContext(leave.info)\n        };\n        this.emit('leave', ctx);\n      }\n      return;\n    }\n    // @ts-ignore â€“ we are hiding some symbols from public API autocompletion.\n    sub._handleLeave(leave);\n  }\n  _handleUnsubscribe(channel, unsubscribe) {\n    const sub = this._getSub(channel);\n    if (!sub) {\n      if (this._isServerSub(channel)) {\n        delete this._serverSubs[channel];\n        this.emit('unsubscribed', {\n          channel: channel\n        });\n      }\n      return;\n    }\n    if (unsubscribe.code < 2500) {\n      // @ts-ignore â€“ we are hiding some symbols from public API autocompletion.\n      sub._setUnsubscribed(unsubscribe.code, unsubscribe.reason, false);\n    } else {\n      // @ts-ignore â€“ we are hiding some symbols from public API autocompletion.\n      sub._setSubscribing(unsubscribe.code, unsubscribe.reason);\n    }\n  }\n  _handleSubscribe(channel, sub) {\n    this._serverSubs[channel] = {\n      'offset': sub.offset,\n      'epoch': sub.epoch,\n      'recoverable': sub.recoverable || false\n    };\n    this.emit('subscribed', this._getSubscribeContext(channel, sub));\n  }\n  _handleDisconnect(disconnect) {\n    const code = disconnect.code;\n    let reconnect = true;\n    if (code >= 3500 && code < 4000 || code >= 4500 && code < 5000) {\n      reconnect = false;\n    }\n    this._disconnect(code, disconnect.reason, reconnect);\n  }\n  _getPublicationContext(channel, pub) {\n    const ctx = {\n      channel: channel,\n      data: pub.data\n    };\n    if (pub.offset) {\n      ctx.offset = pub.offset;\n    }\n    if (pub.info) {\n      ctx.info = this._getJoinLeaveContext(pub.info);\n    }\n    if (pub.tags) {\n      ctx.tags = pub.tags;\n    }\n    return ctx;\n  }\n  _getJoinLeaveContext(clientInfo) {\n    const info = {\n      client: clientInfo.client,\n      user: clientInfo.user\n    };\n    if (clientInfo.conn_info) {\n      info.connInfo = clientInfo.conn_info;\n    }\n    if (clientInfo.chan_info) {\n      info.chanInfo = clientInfo.chan_info;\n    }\n    return info;\n  }\n  _handlePublication(channel, pub) {\n    const sub = this._getSub(channel);\n    if (!sub) {\n      if (this._isServerSub(channel)) {\n        const ctx = this._getPublicationContext(channel, pub);\n        this.emit('publication', ctx);\n        if (pub.offset !== undefined) {\n          this._serverSubs[channel].offset = pub.offset;\n        }\n      }\n      return;\n    }\n    // @ts-ignore â€“ we are hiding some symbols from public API autocompletion.\n    sub._handlePublication(pub);\n  }\n  _handleMessage(message) {\n    this.emit('message', {\n      data: message.data\n    });\n  }\n  _handleServerPing(next) {\n    if (this._sendPong) {\n      const cmd = {};\n      this._transportSendCommands([cmd]);\n    }\n    next();\n  }\n  _handlePush(data, next) {\n    const channel = data.channel;\n    if (data.pub) {\n      this._handlePublication(channel, data.pub);\n    } else if (data.message) {\n      this._handleMessage(data.message);\n    } else if (data.join) {\n      this._handleJoin(channel, data.join);\n    } else if (data.leave) {\n      this._handleLeave(channel, data.leave);\n    } else if (data.unsubscribe) {\n      this._handleUnsubscribe(channel, data.unsubscribe);\n    } else if (data.subscribe) {\n      this._handleSubscribe(channel, data.subscribe);\n    } else if (data.disconnect) {\n      this._handleDisconnect(data.disconnect);\n    }\n    next();\n  }\n  _flush() {\n    const commands = this._commands.slice(0);\n    this._commands = [];\n    this._transportSendCommands(commands);\n  }\n  _createErrorObject(code, message, temporary) {\n    const errObject = {\n      code: code,\n      message: message\n    };\n    if (temporary) {\n      errObject.temporary = true;\n    }\n    return errObject;\n  }\n  _registerCall(id, callback, errback) {\n    this._callbacks[id] = {\n      callback: callback,\n      errback: errback,\n      timeout: null\n    };\n    this._callbacks[id].timeout = setTimeout(() => {\n      delete this._callbacks[id];\n      if ((0, utils_1.isFunction)(errback)) {\n        errback({\n          error: this._createErrorObject(codes_1.errorCodes.timeout, 'timeout')\n        });\n      }\n    }, this._config.timeout);\n  }\n  _addCommand(command) {\n    if (this._batching) {\n      this._commands.push(command);\n    } else {\n      this._transportSendCommands([command]);\n    }\n  }\n  _nextPromiseId() {\n    return ++this._promiseId;\n  }\n  _resolvePromises() {\n    for (const id in this._promises) {\n      if (this._promises[id].timeout) {\n        clearTimeout(this._promises[id].timeout);\n      }\n      this._promises[id].resolve();\n      delete this._promises[id];\n    }\n  }\n  _rejectPromises(err) {\n    for (const id in this._promises) {\n      if (this._promises[id].timeout) {\n        clearTimeout(this._promises[id].timeout);\n      }\n      this._promises[id].reject(err);\n      delete this._promises[id];\n    }\n  }\n}\nexports.Centrifuge = Centrifuge;\nCentrifuge.SubscriptionState = types_1.SubscriptionState;\nCentrifuge.State = types_1.State;","map":{"version":3,"mappings":";;;;;;;;;;;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAKA;AAQA;AAEA,MAAMA,QAAQ,GAAY;EACxBC,QAAQ,EAAE,MAAM;EAChBC,KAAK,EAAE,IAAI;EACXC,QAAQ,EAAE,IAAI;EACdC,IAAI,EAAE,IAAI;EACVC,KAAK,EAAE,KAAK;EACZC,IAAI,EAAE,IAAI;EACVC,OAAO,EAAE,EAAE;EACXC,KAAK,EAAE,IAAI;EACXC,cAAc,EAAE,IAAI;EACpBC,SAAS,EAAE,IAAI;EACfC,WAAW,EAAE,IAAI;EACjBC,MAAM,EAAE,IAAI;EACZC,aAAa,EAAE,EAAE;EACjBC,iBAAiB,EAAE,YAAY;EAC/BC,iBAAiB,EAAE,GAAG;EACtBC,iBAAiB,EAAE,KAAK;EACxBC,OAAO,EAAE,IAAI;EACbC,kBAAkB,EAAE;CACrB;AAQD;AACA,MAAaC,UAAW,SAASC,gBAA0D;EAuCzF;EACAC,YAAYC,QAA2C,EAAEC,OAA0B;IACjF,KAAK,EAAE;IA/BD,sBAAiB,GAA0C,IAAI;IAW/D,oBAAe,GAA0C,IAAI;IAK7D,uBAAkB,GAA0C,IAAI;IAgBtE,IAAI,CAACC,KAAK,GAAGC,aAAK,CAACC,YAAY;IAC/B,IAAI,CAACC,SAAS,GAAGL,QAAQ;IACzB,IAAI,CAACM,UAAU,GAAG,KAAK;IACvB,IAAI,CAACC,WAAW,GAAG,EAAE;IACrB,IAAI,CAACC,sBAAsB,GAAG,CAAC;IAC/B,IAAI,CAACC,mBAAmB,GAAG,KAAK;IAChC,IAAI,CAACC,iBAAiB,GAAG,KAAK;IAC9B,IAAI,CAACC,UAAU,GAAG,IAAI;IACtB,IAAI,CAACC,gBAAgB,GAAG,IAAI;IAC5B,IAAI,CAACC,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACC,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACC,iBAAiB,GAAG,IAAI;IAC7B,IAAI,CAACC,kBAAkB,GAAG,CAAC;IAC3B,IAAI,CAACC,OAAO,GAAG,IAAI;IACnB,IAAI,CAACC,QAAQ,GAAG,EAAE;IAClB,IAAI,CAACC,KAAK,GAAG,EAAE;IACf,IAAI,CAACC,KAAK,GAAG,EAAE;IACf,IAAI,CAACC,WAAW,GAAG,EAAE;IACrB,IAAI,CAACC,UAAU,GAAG,CAAC;IACnB,IAAI,CAACC,SAAS,GAAG,EAAE;IACnB,IAAI,CAACC,SAAS,GAAG,KAAK;IACtB,IAAI,CAACC,gBAAgB,GAAG,KAAK;IAC7B,IAAI,CAACC,eAAe,GAAG,IAAI;IAC3B,IAAI,CAACC,UAAU,GAAG,EAAE;IACpB,IAAI,CAACC,MAAM,GAAGC,SAAS;IACvB,IAAI,CAACC,gBAAgB,GAAGC,OAAO,CAACC,OAAO,EAAE;IACzC,IAAI,CAACC,WAAW,GAAG,CAAC;IACpB,IAAI,CAACC,kBAAkB,GAAG,IAAI;IAC9B,IAAI,CAACC,SAAS,GAAG,KAAK;IACtB,IAAI,CAACC,SAAS,GAAG,EAAE;IACnB,IAAI,CAACC,UAAU,GAAG,CAAC;IACnB,IAAI,CAACC,aAAa,GAAG,KAAK;IAE1B,IAAI,CAACC,OAAO,mCAAQ7D,QAAQ,GAAKuB,OAAO,CAAE;IAC1C,IAAI,CAACuC,UAAU,EAAE;IAEjB,IAAI,IAAI,CAACF,aAAa,EAAE;MACtB,IAAI,CAACG,EAAE,CAAC,OAAO,EAAGC,GAAG,IAAI;QACvB,IAAI,CAACC,MAAM,CAAC,cAAc,EAAED,GAAG,CAACE,QAAQ,EAAE,IAAI,EAAEF,GAAG,CAACG,QAAQ,CAAC;MAC/D,CAAC,CAAC;MACF,IAAI,CAACJ,EAAE,CAAC,OAAO,EAAGC,GAAG,IAAI;QACvB,IAAI,CAACC,MAAM,CAAC,cAAc,EAAED,GAAG,CAAC;MAClC,CAAC,CAAC;KACH,MAAM;MACL;MACA,IAAI,CAACD,EAAE,CAAC,OAAO,EAAE;QAAcK,QAAQ,CAACC,SAAS,EAAE;MAAE,CAAC,CAAC;;EAE3D;EAEA;;;;EAIAC,eAAe,CAACC,OAAe,EAAEhD,OAAsC;IACrE,IAAI,IAAI,CAACiD,eAAe,CAACD,OAAO,CAAC,KAAK,IAAI,EAAE;MAC1C,MAAM,IAAIE,KAAK,CAAC,8BAA8B,GAAGF,OAAO,GAAG,iBAAiB,CAAC;;IAE/E,MAAMG,GAAG,GAAG,IAAIC,2BAAY,CAAC,IAAI,EAAEJ,OAAO,EAAEhD,OAAO,CAAC;IACpD,IAAI,CAACmB,KAAK,CAAC6B,OAAO,CAAC,GAAGG,GAAG;IACzB,OAAOA,GAAG;EACZ;EAEA;;EAEAF,eAAe,CAACD,OAAe;IAC7B,OAAO,IAAI,CAACK,OAAO,CAACL,OAAO,CAAC;EAC9B;EAEA;;EAEAM,kBAAkB,CAACH,GAAwB;IACzC,IAAI,CAACA,GAAG,EAAE;MACR;;IAEF,IAAIA,GAAG,CAAClD,KAAK,KAAKC,yBAAiB,CAACqD,YAAY,EAAE;MAChDJ,GAAG,CAACK,WAAW,EAAE;;IAEnB,IAAI,CAACC,mBAAmB,CAACN,GAAG,CAAC;EAC/B;EAEA;EACAO,aAAa;IACX,OAAO,IAAI,CAACvC,KAAK;EACnB;EAEA;;;EAGAwC,KAAK,CAACjE,OAAgB;IACpB,IAAI,IAAI,CAACO,KAAK,KAAKC,aAAK,CAACC,YAAY,EAAE;MACrC,OAAO2B,OAAO,CAAC8B,MAAM,CAAC;QAAEC,IAAI,EAAEC,kBAAU,CAACC,kBAAkB;QAAEC,OAAO,EAAE;MAAqB,CAAE,CAAC;;IAEhG,IAAI,IAAI,CAAC/D,KAAK,KAAKC,aAAK,CAAC+D,SAAS,EAAE;MAClC,OAAOnC,OAAO,CAACC,OAAO,EAAE;;IAE1B,OAAO,IAAID,OAAO,CAAC,CAACoC,GAAG,EAAEC,GAAG,KAAI;MAC9B,MAAM1B,GAAG,GAAQ;QACfV,OAAO,EAAEmC,GAAG;QACZN,MAAM,EAAEO;OACT;MACD,IAAIzE,OAAO,EAAE;QACX+C,GAAG,CAAC/C,OAAO,GAAG0E,UAAU,CAAC;UACvBD,GAAG,CAAC;YAAEN,IAAI,EAAEC,kBAAU,CAACpE,OAAO;YAAEsE,OAAO,EAAE;UAAS,CAAE,CAAC;QACvD,CAAC,EAAEtE,OAAO,CAAC;;MAEb,IAAI,CAACyC,SAAS,CAAC,IAAI,CAACkC,cAAc,EAAE,CAAC,GAAG5B,GAAG;IAC7C,CAAC,CAAC;EACJ;EAEA;EACA6B,OAAO;IACL,IAAI,IAAI,CAACC,YAAY,EAAE,EAAE;MACvB,IAAI,CAAC7B,MAAM,CAAC,uCAAuC,CAAC;MACpD;;IAEF,IAAI,IAAI,CAAC8B,aAAa,EAAE,EAAE;MACxB,IAAI,CAAC9B,MAAM,CAAC,wCAAwC,CAAC;MACrD;;IAEF,IAAI,CAAC3B,kBAAkB,GAAG,CAAC;IAC3B,IAAI,CAAC0D,gBAAgB,EAAE;EACzB;EAEA;EACAC,UAAU;IACR,IAAI,CAACC,WAAW,CAACb,yBAAiB,CAACc,gBAAgB,EAAE,mBAAmB,EAAE,KAAK,CAAC;EAClF;EAEA;;EAEAC,IAAI,CAAChG,IAAS;IACZ,MAAMiG,GAAG,GAAG;MACVD,IAAI,EAAE;QACJhG,IAAI,EAAEA;;KAET;IAED,MAAMkG,IAAI,GAAG,IAAI;IAEjB,OAAO,IAAI,CAACC,WAAW,EAAE,CAACC,IAAI,CAAC;MAC7B,MAAMC,IAAI,GAAGH,IAAI,CAACI,sBAAsB,CAAC,CAACL,GAAG,CAAC,CAAC,CAAC,CAAC;MACjD,IAAI,CAACI,IAAI,EAAE;QACT,OAAOpD,OAAO,CAAC8B,MAAM,CAACmB,IAAI,CAACK,kBAAkB,CAACtB,kBAAU,CAACuB,mBAAmB,EAAE,uBAAuB,CAAC,CAAC;;MAEzG,OAAOvD,OAAO,CAACC,OAAO,EAAE;IAC1B,CAAC,CAAC;EACJ;EAEA;EACAuD,GAAG,CAACC,MAAc,EAAE1G,IAAS;IAC3B,MAAMiG,GAAG,GAAG;MACVQ,GAAG,EAAE;QACHC,MAAM,EAAEA,MAAM;QACd1G,IAAI,EAAEA;;KAET;IAED,MAAMkG,IAAI,GAAG,IAAI;IAEjB,OAAO,IAAI,CAACC,WAAW,EAAE,CAACC,IAAI,CAAC;MAC7B,OAAOF,IAAI,CAACS,YAAY,CAACV,GAAG,EAAE,UAAUW,KAAU;QAChD,OAAO;UACL,MAAM,EAAEA,KAAK,CAACH,GAAG,CAACzG;SACnB;MACH,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEA;EACA6G,OAAO,CAAC1C,OAAe,EAAEnE,IAAS;IAChC,MAAMiG,GAAG,GAAG;MACVY,OAAO,EAAE;QACP1C,OAAO,EAAEA,OAAO;QAChBnE,IAAI,EAAEA;;KAET;IAED,MAAMkG,IAAI,GAAG,IAAI;IAEjB,OAAO,IAAI,CAACC,WAAW,EAAE,CAACC,IAAI,CAAC;MAC7B,OAAOF,IAAI,CAACS,YAAY,CAACV,GAAG,EAAE;QAC5B,OAAO,EAAE;MACX,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEA;;EAEAa,OAAO,CAAC3C,OAAe,EAAEhD,OAAwB;IAC/C,MAAM8E,GAAG,GAAG;MACVa,OAAO,EAAE,IAAI,CAACC,kBAAkB,CAAC5C,OAAO,EAAEhD,OAAO;KAClD;IAED,MAAM+E,IAAI,GAAG,IAAI;IAEjB,OAAO,IAAI,CAACC,WAAW,EAAE,CAACC,IAAI,CAAC;MAC7B,OAAOF,IAAI,CAACS,YAAY,CAACV,GAAG,EAAE,UAAUW,KAAU;QAChD,MAAMI,MAAM,GAAGJ,KAAK,CAACE,OAAO;QAC5B,MAAMG,YAAY,GAAU,EAAE;QAC9B,IAAID,MAAM,CAACC,YAAY,EAAE;UACvB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,MAAM,CAACC,YAAY,CAACE,MAAM,EAAED,CAAC,EAAE,EAAE;YACnDD,YAAY,CAACG,IAAI,CAAClB,IAAI,CAACmB,sBAAsB,CAAClD,OAAO,EAAE6C,MAAM,CAACC,YAAY,CAACC,CAAC,CAAC,CAAC,CAAC;;;QAGnF,OAAO;UACL,cAAc,EAAED,YAAY;UAC5B,OAAO,EAAED,MAAM,CAACM,KAAK,IAAI,EAAE;UAC3B,QAAQ,EAAEN,MAAM,CAACO,MAAM,IAAI;SAC5B;MACH,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEA;EACAC,QAAQ,CAACrD,OAAe;IACtB,MAAM8B,GAAG,GAAG;MACVuB,QAAQ,EAAE;QACRrD,OAAO,EAAEA;;KAEZ;IAED,MAAM+B,IAAI,GAAG,IAAI;IAEjB,OAAO,IAAI,CAACC,WAAW,EAAE,CAACC,IAAI,CAAC;MAC7B,OAAOF,IAAI,CAACS,YAAY,CAACV,GAAG,EAAE,UAAUW,KAAU;QAChD,OAAO;UACL,SAAS,EAAEA,KAAK,CAACY,QAAQ,CAACA;SAC3B;MACH,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEA;EACAC,aAAa,CAACtD,OAAe;IAC3B,MAAM8B,GAAG,GAAG;MACV,gBAAgB,EAAE;QAChB9B,OAAO,EAAEA;;KAEZ;IAED,MAAM+B,IAAI,GAAG,IAAI;IAEjB,OAAO,IAAI,CAACC,WAAW,EAAE,CAACC,IAAI,CAAC;MAC7B,OAAOF,IAAI,CAACS,YAAY,CAACV,GAAG,EAAE,UAAUW,KAAU;QAChD,MAAMI,MAAM,GAAGJ,KAAK,CAACc,cAAc;QACnC,OAAO;UACL,UAAU,EAAEV,MAAM,CAACW,SAAS;UAC5B,YAAY,EAAEX,MAAM,CAACY;SACtB;MACH,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEA;;EAEAC,aAAa;IACX;IACA;IACA,IAAI,CAACnF,SAAS,GAAG,IAAI;EACvB;EAEA;;EAEAoF,YAAY;IACV,MAAM5B,IAAI,GAAG,IAAI;IACjB;IACA;IACA;IACAjD,OAAO,CAACC,OAAO,EAAE,CAACkD,IAAI,CAAC;MACrBnD,OAAO,CAACC,OAAO,EAAE,CAACkD,IAAI,CAAC;QACrBF,IAAI,CAACxD,SAAS,GAAG,KAAK;QACtBwD,IAAI,CAAC6B,MAAM,EAAE;MACf,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEQlE,MAAM,GAAe;IAC3B,IAAI,CAAC,IAAI,CAACL,aAAa,EAAE;MACvB;;IACD,kCAHewE,IAAW;MAAXA,IAAW;IAAA;IAI3B,eAAG,EAAC,OAAO,EAAEA,IAAI,CAAC;EACpB;EAEA;EACQC,UAAU,CAACC,MAA2B;IAC5C,IAAI,IAAI,CAACC,eAAe,CAACD,MAAM,CAAC,EAAE;MAChC;;IAEF,IAAIA,MAAM,KAAK,UAAU,EAAE;MACzB,MAAM,IAAI7D,KAAK,CAAC,kFAAkF,CAAC;;IAErG,IAAI,CAACtC,QAAQ,GAAG,IAAIqG,kBAAW,EAAE;IACjC,IAAI,CAACpG,QAAQ,GAAG,IAAIoG,kBAAW,EAAE;EACnC;EAEA;EACUD,eAAe,CAACE,OAA4B;IACpD,OAAO,KAAK;EACd;EAEQ3E,UAAU;IAChB,IAAI,EAAE,SAAS,IAAI4E,UAAU,CAAC,EAAE;MAC9B,MAAM,IAAIjE,KAAK,CAAC,2BAA2B,CAAC;;IAG9C,IAAI,CAAC,IAAI,CAAC9C,SAAS,EAAE;MACnB,MAAM,IAAI8C,KAAK,CAAC,iCAAiC,CAAC;;IAGpD,IAAI,IAAI,CAACZ,OAAO,CAAC5D,QAAQ,KAAK,MAAM,IAAI,IAAI,CAAC4D,OAAO,CAAC5D,QAAQ,KAAK,UAAU,EAAE;MAC5E,MAAM,IAAIwE,KAAK,CAAC,uBAAuB,GAAG,IAAI,CAACZ,OAAO,CAAC5D,QAAQ,CAAC;;IAGlE,IAAI,IAAI,CAAC4D,OAAO,CAAC3D,KAAK,KAAK,IAAI,EAAE;MAC/B,IAAI,CAACgD,MAAM,GAAG,IAAI,CAACW,OAAO,CAAC3D,KAAK;;IAGlC,IAAI,CAACmI,UAAU,CAAC,MAAM,CAAC;IACvB,IAAI,IAAI,CAACxE,OAAO,CAAC5D,QAAQ,KAAK,UAAU,EAAE;MACxC,IAAI,CAACoI,UAAU,CAAC,UAAU,CAAC;;IAG7B,IAAI,IAAI,CAACxE,OAAO,CAACxD,KAAK,KAAK,IAAI,IAC5B,OAAOsI,YAAY,KAAK,WAAW,IAAIA,YAAY,CAACC,OAAO,CAAC,kBAAkB,CAAE,EAAE;MACnF,IAAI,CAAChF,aAAa,GAAG,IAAI;;IAG3B,IAAI,CAACK,MAAM,CAAC,QAAQ,EAAE,IAAI,CAACJ,OAAO,CAAC;IAEnC,IAAI,OAAO,IAAI,CAAClC,SAAS,KAAK,QAAQ,EAAE;MACtC;IAAA,CACD,MAAM,IAAI,OAAO,IAAI,CAACA,SAAS,KAAK,QAAQ,IAAI,IAAI,CAACA,SAAS,YAAYkH,KAAK,EAAE;MAChF,IAAI,CAAChH,WAAW,GAAG,IAAI,CAACF,SAAS;MACjC,IAAI,CAACC,UAAU,GAAG,IAAI;MACtB,KAAK,MAAM0F,CAAC,IAAI,IAAI,CAACzF,WAAW,EAAE;QAChC,MAAMiH,eAAe,GAAG,IAAI,CAACjH,WAAW,CAACyF,CAAC,CAAC;QAC3C,IAAI,CAACwB,eAAe,CAACxH,QAAQ,IAAI,CAACwH,eAAe,CAACC,SAAS,EAAE;UAC3D,MAAM,IAAItE,KAAK,CAAC,mCAAmC,CAAC;;QAEtD,MAAMuE,aAAa,GAAGF,eAAe,CAACC,SAAS;QAC/C,IAAI,CAAC,WAAW,EAAE,aAAa,EAAE,KAAK,EAAE,QAAQ,EAAE,cAAc,CAAC,CAACE,OAAO,CAACD,aAAa,CAAC,GAAG,CAAC,EAAE;UAC5F,MAAM,IAAIvE,KAAK,CAAC,8BAA8B,GAAGuE,aAAa,CAAC;;;KAGpE,MAAM;MACL,MAAM,IAAIvE,KAAK,CAAC,mFAAmF,CAAC;;EAExG;EAEQyE,SAAS,CAAC/E,QAAe;IAC/B,IAAI,IAAI,CAAC3C,KAAK,KAAK2C,QAAQ,EAAE;MAC3B,MAAMD,QAAQ,GAAG,IAAI,CAAC1C,KAAK;MAC3B,IAAI,CAACA,KAAK,GAAG2C,QAAQ;MACrB,IAAI,CAACgF,IAAI,CAAC,OAAO,EAAE;QAAEhF,QAAQ;QAAED;MAAQ,CAAE,CAAC;MAC1C,OAAO,IAAI;;IAEb,OAAO,KAAK;EACd;EAEQkF,eAAe;IACrB,OAAO,IAAI,CAAC5H,KAAK,KAAKC,aAAK,CAACC,YAAY;EAC1C;EAEQqE,aAAa;IACnB,OAAO,IAAI,CAACvE,KAAK,KAAKC,aAAK,CAAC4H,UAAU;EACxC;EAEQvD,YAAY;IAClB,OAAO,IAAI,CAACtE,KAAK,KAAKC,aAAK,CAAC+D,SAAS;EACvC;EAEQ8D,cAAc;IACpB,OAAO,EAAE,IAAI,CAAC1G,UAAU;EAC1B;EAEQ2G,kBAAkB;IACxB,MAAMC,KAAK,GAAG,mBAAO,EAAC,IAAI,CAAClH,kBAAkB,EAAE,IAAI,CAACuB,OAAO,CAAC9C,iBAAiB,EAAE,IAAI,CAAC8C,OAAO,CAAC7C,iBAAiB,CAAC;IAC9G,IAAI,CAACsB,kBAAkB,IAAI,CAAC;IAC5B,OAAOkH,KAAK;EACd;EAEQC,sBAAsB;IAC5B;IACA,KAAK,MAAMC,EAAE,IAAI,IAAI,CAACzG,UAAU,EAAE;MAChC,IAAI,IAAI,CAACA,UAAU,CAAC0G,cAAc,CAACD,EAAE,CAAC,EAAE;QACtC,MAAME,SAAS,GAAG,IAAI,CAAC3G,UAAU,CAACyG,EAAE,CAAC;QACrCG,YAAY,CAACD,SAAS,CAAC3I,OAAO,CAAC;QAC/B,MAAM6I,OAAO,GAAGF,SAAS,CAACE,OAAO;QACjC,IAAI,CAACA,OAAO,EAAE;UACZ;;QAEFA,OAAO,CAAC;UAAEC,KAAK,EAAE,IAAI,CAACpD,kBAAkB,CAACtB,kBAAU,CAAC2E,gBAAgB,EAAE,mBAAmB;QAAC,CAAE,CAAC;;;IAGjG,IAAI,CAAC/G,UAAU,GAAG,EAAE;EACtB;EAEQgH,oBAAoB;IAC1B,IAAI,CAAC1H,OAAO,GAAG,IAAI;IACnB,IAAI,CAAC2H,uBAAuB,EAAE;IAC9B,IAAI,CAACC,oBAAoB,EAAE;IAE3B;IACA,KAAK,MAAM5F,OAAO,IAAI,IAAI,CAAC7B,KAAK,EAAE;MAChC,IAAI,CAAC,IAAI,CAACA,KAAK,CAACiH,cAAc,CAACpF,OAAO,CAAC,EAAE;QACvC;;MAEF,MAAMG,GAAG,GAAG,IAAI,CAAChC,KAAK,CAAC6B,OAAO,CAAC;MAC/B,IAAIG,GAAG,CAAClD,KAAK,KAAKC,yBAAiB,CAAC2I,UAAU,EAAE;QAC9C;QACA1F,GAAG,CAAC2F,eAAe,CAAChF,wBAAgB,CAACiF,eAAe,EAAE,kBAAkB,CAAC;;;IAI7E;IACA,KAAK,MAAM/F,OAAO,IAAI,IAAI,CAAC5B,WAAW,EAAE;MACtC,IAAI,IAAI,CAACA,WAAW,CAACgH,cAAc,CAACpF,OAAO,CAAC,EAAE;QAC5C,IAAI,CAAC4E,IAAI,CAAC,aAAa,EAAE;UAAE5E,OAAO,EAAEA;QAAO,CAAE,CAAC;;;EAGpD;EAEQgG,iBAAiB,CAACC,QAAe;IACvC,KAAK,MAAMC,OAAO,IAAID,QAAQ,EAAE;MAC9B,MAAMd,EAAE,GAAGe,OAAO,CAACf,EAAE;MACrB,IAAI,EAAEA,EAAE,IAAI,IAAI,CAACzG,UAAU,CAAC,EAAE;QAC5B;;MAEF,MAAM2G,SAAS,GAAG,IAAI,CAAC3G,UAAU,CAACyG,EAAE,CAAC;MACrCG,YAAY,CAAC,IAAI,CAAC5G,UAAU,CAACyG,EAAE,CAAC,CAACzI,OAAO,CAAC;MACzC,OAAO,IAAI,CAACgC,UAAU,CAACyG,EAAE,CAAC;MAC1B,MAAMI,OAAO,GAAGF,SAAS,CAACE,OAAO;MACjCA,OAAO,CAAC;QAAEC,KAAK,EAAE,IAAI,CAACpD,kBAAkB,CAACtB,kBAAU,CAACuB,mBAAmB,EAAE,uBAAuB;MAAC,CAAE,CAAC;;EAExG;EAEQF,sBAAsB,CAAC8D,QAAe;IAC5C,IAAI,CAACA,QAAQ,CAACjD,MAAM,EAAE;MACpB,OAAO,IAAI;;IAEb,IAAI,CAAC,IAAI,CAACtF,UAAU,EAAE;MACpB,OAAO,KAAK;;IAEd,IAAI;MACF,IAAI,CAACA,UAAU,CAACmE,IAAI,CAAC,IAAI,CAACjE,QAAQ,CAACuI,cAAc,CAACF,QAAQ,CAAC,EAAE,IAAI,CAAChI,QAAQ,EAAE,IAAI,CAACC,KAAK,CAAC;KACxF,CAAC,OAAOkI,CAAC,EAAE;MACV,IAAI,CAAC1G,MAAM,CAAC,wBAAwB,EAAE0G,CAAC,CAAC;MACxC,IAAI,CAACJ,iBAAiB,CAACC,QAAQ,CAAC;MAChC,OAAO,KAAK;;IAEd,OAAO,IAAI;EACb;EAEQI,oBAAoB;IAC1B,IAAIlK,SAAc;IAClB,IAAI,IAAI,CAACmD,OAAO,CAACnD,SAAS,KAAK,IAAI,EAAE;MACnCA,SAAS,GAAG,IAAI,CAACmD,OAAO,CAACnD,SAAS;KACnC,MAAM;MACL,IAAI,EAAE,OAAOgI,UAAU,CAACmC,SAAS,KAAK,UAAU,IAAI,OAAOnC,UAAU,CAACmC,SAAS,KAAK,QAAQ,CAAC,EAAE;QAC7FnK,SAAS,GAAGgI,UAAU,CAACmC,SAAS;;;IAIpC,IAAIjK,MAAM,GAAG,IAAI;IACjB,IAAI,IAAI,CAACiD,OAAO,CAACjD,MAAM,KAAK,IAAI,EAAE;MAChCA,MAAM,GAAG,IAAI,CAACiD,OAAO,CAACjD,MAAM;KAC7B,MAAM;MACL,IAAI,OAAO8H,UAAU,CAACoC,MAAM,KAAK,WAAW,EAAE;QAC5ClK,MAAM,GAAG8H,UAAU,CAACoC,MAAM;;;IAI9B,IAAInK,WAAW,GAAQ,IAAI;IAC3B,IAAI,IAAI,CAACkD,OAAO,CAAClD,WAAW,KAAK,IAAI,EAAE;MACrCA,WAAW,GAAG,IAAI,CAACkD,OAAO,CAAClD,WAAW;KACvC,MAAM;MACL,IAAI,OAAO+H,UAAU,CAACqC,WAAW,KAAK,WAAW,EAAE;QACjDpK,WAAW,GAAG+H,UAAU,CAACqC,WAAW;;;IAIxC,IAAIC,SAAS,GAAQ,IAAI;IACzB,IAAI,IAAI,CAACnH,OAAO,CAACrD,KAAK,KAAK,IAAI,EAAE;MAC/BwK,SAAS,GAAG,IAAI,CAACnH,OAAO,CAACrD,KAAK;KAC/B,MAAM;MACL,IAAI,OAAOkI,UAAU,CAAClI,KAAK,KAAK,WAAW,EAAE;QAC3CwK,SAAS,GAAGtC,UAAU,CAAClI,KAAK;;;IAIhC,IAAIC,cAAc,GAAQ,IAAI;IAC9B,IAAI,IAAI,CAACoD,OAAO,CAACpD,cAAc,KAAK,IAAI,EAAE;MACxCA,cAAc,GAAG,IAAI,CAACoD,OAAO,CAACpD,cAAc;KAC7C,MAAM;MACL,IAAI,OAAOiI,UAAU,CAACuC,cAAc,KAAK,WAAW,EAAE;QACpDxK,cAAc,GAAGiI,UAAU,CAACuC,cAAc;;;IAI9C,IAAI,CAAC,IAAI,CAACrJ,UAAU,EAAE;MACpB,IAAI,sBAAU,EAAC,IAAI,CAACD,SAAS,EAAE,MAAM,CAAC,EAAE;QACtC,MAAM,IAAI8C,KAAK,CAAC,2NAA2N,CAAC;OAC7O,MAAM;QACL,IAAI,CAACR,MAAM,CAAC,2BAA2B,CAAC;QACxC,IAAI,CAAChC,UAAU,GAAG,IAAIiJ,wCAAkB,CAAC,IAAI,CAACvJ,SAAmB,EAAE;UACjEjB,SAAS,EAAEA;SACZ,CAAC;QACF,IAAI,CAAC,IAAI,CAACuB,UAAU,CAACkJ,SAAS,EAAE,EAAE;UAChC,MAAM,IAAI1G,KAAK,CAAC,yBAAyB,CAAC;;;KAG/C,MAAM;MACL,IAAI,IAAI,CAAC3C,sBAAsB,IAAI,IAAI,CAACD,WAAW,CAAC0F,MAAM,EAAE;QAC1D,IAAI,CAACxF,mBAAmB,GAAG,IAAI;QAC/B,IAAI,CAACD,sBAAsB,GAAG,CAAC;;MAEjC,IAAIsJ,KAAK,GAAG,CAAC;MACb,OAAO,IAAI,EAAE;QACX,IAAIA,KAAK,IAAI,IAAI,CAACvJ,WAAW,CAAC0F,MAAM,EAAE;UACpC,MAAM,IAAI9C,KAAK,CAAC,8BAA8B,CAAC;;QAEjD,MAAMqE,eAAe,GAAG,IAAI,CAACjH,WAAW,CAAC,IAAI,CAACC,sBAAsB,CAAC;QACrE,MAAMkH,aAAa,GAAGF,eAAe,CAACC,SAAS;QAC/C,MAAMsC,iBAAiB,GAAGvC,eAAe,CAACxH,QAAQ;QAElD,IAAI0H,aAAa,KAAK,WAAW,EAAE;UACjC,IAAI,CAAC/E,MAAM,CAAC,4BAA4B,CAAC;UACzC,IAAI,CAAChC,UAAU,GAAG,IAAIiJ,wCAAkB,CAACG,iBAAiB,EAAE;YAC1D3K,SAAS,EAAEA;WACZ,CAAC;UACF,IAAI,CAAC,IAAI,CAACuB,UAAU,CAACkJ,SAAS,EAAE,EAAE;YAChC,IAAI,CAAClH,MAAM,CAAC,mCAAmC,CAAC;YAChD,IAAI,CAACnC,sBAAsB,EAAE;YAC7BsJ,KAAK,EAAE;YACP;;SAEH,MAAM,IAAIpC,aAAa,KAAK,cAAc,EAAE;UAC3C,IAAI,CAAC/E,MAAM,CAAC,+BAA+B,CAAC;UAC5C,IAAI,CAAChC,UAAU,GAAG,IAAIqJ,8CAAqB,CAACD,iBAAiB,EAAE;YAC7DE,YAAY,EAAE7C,UAAU,CAAC8C,YAAY;YACrCC,OAAO,EAAE,IAAI,CAACrJ,QAAQ;YACtBsJ,OAAO,EAAE,IAAI,CAACvJ;WACf,CAAC;UACF,IAAI,CAAC,IAAI,CAACF,UAAU,CAACkJ,SAAS,EAAE,EAAE;YAChC,IAAI,CAAClH,MAAM,CAAC,sCAAsC,CAAC;YACnD,IAAI,CAACnC,sBAAsB,EAAE;YAC7BsJ,KAAK,EAAE;YACP;;SAEH,MAAM,IAAIpC,aAAa,KAAK,aAAa,EAAE;UAC1C,IAAI,CAAC/E,MAAM,CAAC,8BAA8B,CAAC;UAC3C,IAAI,CAAChC,UAAU,GAAG,IAAI0J,2CAAmB,CAACN,iBAAiB,EAAE;YAC3D7K,KAAK,EAAEwK,SAAS;YAChBvK,cAAc,EAAEA,cAAc;YAC9BK,iBAAiB,EAAE,IAAI,CAAC+C,OAAO,CAAC/C,iBAAiB;YACjD2K,OAAO,EAAE,IAAI,CAACrJ,QAAQ;YACtBsJ,OAAO,EAAE,IAAI,CAACvJ;WACf,CAAC;UACF,IAAI,CAAC,IAAI,CAACF,UAAU,CAACkJ,SAAS,EAAE,EAAE;YAChC,IAAI,CAAClH,MAAM,CAAC,qCAAqC,CAAC;YAClD,IAAI,CAACnC,sBAAsB,EAAE;YAC7BsJ,KAAK,EAAE;YACP;;SAEH,MAAM,IAAIpC,aAAa,KAAK,KAAK,EAAE;UAClC,IAAI,CAAC/E,MAAM,CAAC,sBAAsB,CAAC;UACnC,IAAI,CAAChC,UAAU,GAAG,IAAI2J,4BAAY,CAACP,iBAAiB,EAAE;YACpD1K,WAAW,EAAEA,WAAW;YACxBH,KAAK,EAAEwK,SAAS;YAChBlK,iBAAiB,EAAE,IAAI,CAAC+C,OAAO,CAAC/C;WACjC,CAAC;UACF,IAAI,CAAC,IAAI,CAACmB,UAAU,CAACkJ,SAAS,EAAE,EAAE;YAChC,IAAI,CAAClH,MAAM,CAAC,6BAA6B,CAAC;YAC1C,IAAI,CAACnC,sBAAsB,EAAE;YAC7BsJ,KAAK,EAAE;YACP;;SAEH,MAAM,IAAIpC,aAAa,KAAK,QAAQ,EAAE;UACrC,IAAI,CAAC/E,MAAM,CAAC,eAAe,CAAC;UAC5B,IAAI,CAAChC,UAAU,GAAG,IAAI4J,kCAAe,CAACR,iBAAiB,EAAE;YACvDzK,MAAM,EAAEA,MAAM;YACdC,aAAa,EAAE,IAAI,CAACgD,OAAO,CAAChD;WAC7B,CAAC;UACF,IAAI,CAAC,IAAI,CAACoB,UAAU,CAACkJ,SAAS,EAAE,EAAE;YAChC,IAAI,CAAClH,MAAM,CAAC,gCAAgC,CAAC;YAC7C,IAAI,CAACnC,sBAAsB,EAAE;YAC7BsJ,KAAK,EAAE;YACP;;SAEH,MAAM;UACL,MAAM,IAAI3G,KAAK,CAAC,oBAAoB,GAAGuE,aAAa,CAAC;;QAEvD;;;IAIJ,MAAM1C,IAAI,GAAG,IAAI;IAEjB,IAAI0C,aAAqB;IACzB,IAAI8C,OAAO,GAAG,KAAK;IAEnB,IAAIC,UAAU,GAAG,IAAI;IACrB,IAAI,IAAI,CAAC9J,UAAU,CAAC3B,IAAI,EAAE,KAAK,KAAK,EAAE;MACpC;MACA;MACA;MACAyL,UAAU,GAAG,KAAK;;IAGpB,MAAMC,eAAe,GAAU,EAAE;IAEjC,IAAI,IAAI,CAAC/J,UAAU,CAACgK,SAAS,EAAE,EAAE;MAC/B,MAAMC,cAAc,GAAG5F,IAAI,CAAC6F,YAAY,CAAC,IAAI,CAAC;MAC9CH,eAAe,CAACxE,IAAI,CAAC0E,cAAc,CAAC;MACpC,IAAIH,UAAU,EAAE;QACd,MAAMK,iBAAiB,GAAU9F,IAAI,CAAC+F,sBAAsB,CAAC,IAAI,EAAE,IAAI,CAAC;QACxE,KAAK,MAAM/E,CAAC,IAAI8E,iBAAiB,EAAE;UACjCJ,eAAe,CAACxE,IAAI,CAAC4E,iBAAiB,CAAC9E,CAAC,CAAC,CAAC;;;;IAKhD,MAAMgF,WAAW,GAAG,IAAI,CAACnK,QAAQ,CAACuI,cAAc,CAACsB,eAAe,CAAC;IAEjE,IAAI,CAAC/J,UAAU,CAACsK,UAAU,CAAC,IAAI,CAAC1I,OAAO,CAAC5D,QAAQ,EAAE;MAChDuM,MAAM,EAAE;QACNV,OAAO,GAAG,IAAI;QACd9C,aAAa,GAAG1C,IAAI,CAACrE,UAAU,CAACwK,OAAO,EAAE;QACzCnG,IAAI,CAACrC,MAAM,CAAC+E,aAAa,EAAE,gBAAgB,CAAC;QAC5C1C,IAAI,CAACtE,iBAAiB,GAAG,IAAI;QAC7BsE,IAAI,CAACpE,gBAAgB,GAAG,KAAK;QAE7B,IAAIoE,IAAI,CAACrE,UAAU,CAACgK,SAAS,EAAE,EAAE;UAC/B;;QAEF3F,IAAI,CAAC2B,aAAa,EAAE;QACpB3B,IAAI,CAAC6F,YAAY,CAAC,KAAK,CAAC;QACxB,IAAIJ,UAAU,EAAE;UACdzF,IAAI,CAAC+F,sBAAsB,CAAC,IAAI,EAAE,KAAK,CAAC;;QAE1C/F,IAAI,CAAC4B,YAAY,EAAE;MACrB,CAAC;MACDwE,OAAO,EAAE,UAAU/B,CAAM;QACvBrE,IAAI,CAACrC,MAAM,CAAC,uBAAuB,EAAE0G,CAAC,CAAC;MACzC,CAAC;MACDgC,OAAO,EAAE,UAAUC,UAAU;QAC3BtG,IAAI,CAACrC,MAAM,CAACqC,IAAI,CAACrE,UAAU,CAAC3B,IAAI,EAAE,EAAE,kBAAkB,CAAC;QACvDgG,IAAI,CAACpE,gBAAgB,GAAG,IAAI;QAE5B,IAAI2K,MAAM,GAAG,mBAAmB;QAChC,IAAIC,aAAa,GAAG,IAAI;QACxB,IAAI1H,IAAI,GAAG,CAAC;QAEZ,IAAIwH,UAAU,IAAI,MAAM,IAAIA,UAAU,IAAIA,UAAU,CAACxH,IAAI,EAAE;UACzDA,IAAI,GAAGwH,UAAU,CAACxH,IAAI;;QAGxB,IAAIwH,UAAU,IAAIA,UAAU,CAACC,MAAM,EAAE;UACnC,IAAI;YACF,MAAME,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACL,UAAU,CAACC,MAAM,CAAC;YAC5CA,MAAM,GAAGE,MAAM,CAACF,MAAM;YACtBC,aAAa,GAAGC,MAAM,CAACG,SAAS;WACjC,CAAC,OAAOvC,CAAC,EAAE;YACVkC,MAAM,GAAGD,UAAU,CAACC,MAAM;YAC1B,IAAKzH,IAAI,IAAI,IAAI,IAAIA,IAAI,GAAG,IAAI,IAAMA,IAAI,IAAI,IAAI,IAAIA,IAAI,GAAG,IAAK,EAAE;cAClE0H,aAAa,GAAG,KAAK;;;;QAK3B,IAAI1H,IAAI,GAAG,IAAI,EAAE;UACf,IAAIA,IAAI,KAAK,IAAI,EAAE;YACjBA,IAAI,GAAGC,yBAAiB,CAAC8H,gBAAgB;YACzCN,MAAM,GAAG,6BAA6B;YACtCC,aAAa,GAAG,KAAK;WACtB,MAAM;YACL1H,IAAI,GAAGC,uBAAe,CAACiF,eAAe;YACtCuC,MAAM,GAAG,kBAAkB;;UAE7B,IAAIvG,IAAI,CAAC1E,UAAU,IAAI,CAAC0E,IAAI,CAACtE,iBAAiB,EAAE;YAC9CsE,IAAI,CAACxE,sBAAsB,EAAE;YAC7B,IAAIwE,IAAI,CAACxE,sBAAsB,IAAIwE,IAAI,CAACzE,WAAW,CAAC0F,MAAM,EAAE;cAC1DjB,IAAI,CAACvE,mBAAmB,GAAG,IAAI;cAC/BuE,IAAI,CAACxE,sBAAsB,GAAG,CAAC;;;SAGpC,MAAM;UACL;UACAwE,IAAI,CAACtE,iBAAiB,GAAG,IAAI;;QAG/B,IAAIoL,kBAAkB,GAAG,KAAK;QAC9B,IAAI9G,IAAI,CAAC1E,UAAU,IAAI,CAAC0E,IAAI,CAACtE,iBAAiB,IAAI,CAACsE,IAAI,CAACvE,mBAAmB,EAAE;UAC3EqL,kBAAkB,GAAG,IAAI;;QAG3B,IAAI9G,IAAI,CAACP,aAAa,EAAE,IAAI,CAAC+F,OAAO,EAAE;UACpCxF,IAAI,CAAC6C,IAAI,CAAC,OAAO,EAAE;YACjBkE,IAAI,EAAE,WAAW;YACjBtD,KAAK,EAAE;cACL3E,IAAI,EAAEC,kBAAU,CAACiF,eAAe;cAChC/E,OAAO,EAAE;aACV;YACDwD,SAAS,EAAEzC,IAAI,CAACrE,UAAU,CAAC3B,IAAI;WAChC,CAAC;;QAGJgG,IAAI,CAACJ,WAAW,CAACd,IAAI,EAAEyH,MAAM,EAAEC,aAAa,CAAC;QAE7C,IAAIxG,IAAI,CAACP,aAAa,EAAE,EAAE;UACxB,IAAIyD,KAAK,GAAGlD,IAAI,CAACiD,kBAAkB,EAAE;UACrC,IAAI6D,kBAAkB,EAAE;YACtB5D,KAAK,GAAG,CAAC;;UAEXlD,IAAI,CAACrC,MAAM,CAAC,kBAAkB,GAAGuF,KAAK,GAAG,eAAe,CAAC;UACzDlD,IAAI,CAACjE,iBAAiB,GAAGsD,UAAU,CAAC,MAAK;YACvCW,IAAI,CAACgH,kBAAkB,EAAE;UAC3B,CAAC,EAAE9D,KAAK,CAAC;;MAEb,CAAC;MACD+D,SAAS,EAAE,UAAUnN,IAAI;QACvBkG,IAAI,CAACkH,aAAa,CAACpN,IAAI,CAAC;MAC1B;KACD,EAAEkM,WAAW,CAAC;EACjB;EAEQH,YAAY,CAACsB,WAAoB;IACvC,MAAMvB,cAAc,GAAG,IAAI,CAACwB,wBAAwB,EAAE;IACtD,MAAMpH,IAAI,GAAG,IAAI;IACjB,IAAI,CAACqH,KAAK,CAACzB,cAAc,EAAEuB,WAAW,CAAC,CAACjH,IAAI,CAACoH,UAAU,IAAG;MACxD;MACA,MAAMxG,MAAM,GAAGwG,UAAU,CAAC5G,KAAK,CAACnB,OAAO;MACvCS,IAAI,CAACuH,gBAAgB,CAACzG,MAAM,CAAC;MAC7B;MACA,IAAIwG,UAAU,CAACE,IAAI,EAAE;QACnB;QACAF,UAAU,CAACE,IAAI,EAAE;;IAErB,CAAC,EAAEC,SAAS,IAAG;MACbzH,IAAI,CAAC0H,aAAa,CAACD,SAAS,CAAChE,KAAK,CAAC;MACnC,IAAIgE,SAAS,CAACD,IAAI,EAAE;QAClBC,SAAS,CAACD,IAAI,EAAE;;IAEpB,CAAC,CAAC;IACF,OAAO5B,cAAc;EACvB;EAEQoB,kBAAkB;IACxB,IAAI,CAAC,IAAI,CAACvH,aAAa,EAAE,EAAE;MACzB;;IAGF,MAAMkI,gBAAgB,GAAG,IAAI,CAAClL,gBAAgB,IAAK,CAAC,IAAI,CAACG,MAAM,IAAI,IAAI,CAACW,OAAO,CAAC1D,QAAQ,KAAK,IAAK;IAClG,IAAI,CAAC8N,gBAAgB,EAAE;MACrB,IAAI,CAACrD,oBAAoB,EAAE;MAC3B;;IAGF,MAAMtE,IAAI,GAAG,IAAI;IAEjB,IAAI,CAAC4H,SAAS,EAAE,CAAC1H,IAAI,CAAC,UAAUtG,KAAK;MACnC,IAAI,CAACoG,IAAI,CAACP,aAAa,EAAE,EAAE;QACzB;;MAEF,IAAI,CAAC7F,KAAK,EAAE;QACVoG,IAAI,CAAC6H,iBAAiB,EAAE;QACxB;;MAEF7H,IAAI,CAACpD,MAAM,GAAGhD,KAAK;MACnBoG,IAAI,CAACrC,MAAM,CAAC,4BAA4B,CAAC;MACzCqC,IAAI,CAACsE,oBAAoB,EAAE;IAC7B,CAAC,CAAC,CAACwD,KAAK,CAAC,UAAUzD,CAAC;MAClB,IAAI,CAACrE,IAAI,CAACP,aAAa,EAAE,EAAE;QACzB;;MAEFO,IAAI,CAAC6C,IAAI,CAAC,OAAO,EAAE;QACjB,MAAM,EAAE,cAAc;QACtB,OAAO,EAAE;UACP/D,IAAI,EAAEC,kBAAU,CAACgJ,kBAAkB;UACnC9I,OAAO,EAAEoF,CAAC,KAAKxH,SAAS,GAAGwH,CAAC,CAAC2D,QAAQ,EAAE,GAAG;;OAE7C,CAAC;MACF,MAAM9E,KAAK,GAAGlD,IAAI,CAACiD,kBAAkB,EAAE;MACvCjD,IAAI,CAACrC,MAAM,CAAC,qDAAqD,GAAGuF,KAAK,GAAG,eAAe,EAAEmB,CAAC,CAAC;MAC/FrE,IAAI,CAACjE,iBAAiB,GAAGsD,UAAU,CAAC,MAAK;QACvCW,IAAI,CAACgH,kBAAkB,EAAE;MAC3B,CAAC,EAAE9D,KAAK,CAAC;IACX,CAAC,CAAC;EACJ;EAEQwE,aAAa,CAACO,GAAQ;IAC5B,IAAI,IAAI,CAAC/M,KAAK,KAAKC,aAAK,CAAC4H,UAAU,EAAE;MACnC;;IAEF,IAAIkF,GAAG,CAACnJ,IAAI,KAAK,GAAG,EAAE;MAAE;MACtB;MACA,IAAI,CAACrC,gBAAgB,GAAG,IAAI;;IAE9B,IAAIwL,GAAG,CAACnJ,IAAI,GAAG,GAAG,IAAImJ,GAAG,CAACC,SAAS,KAAK,IAAI,IAAID,GAAG,CAACnJ,IAAI,KAAK,GAAG,EAAE;MAChE,IAAI,CAAC+D,IAAI,CAAC,OAAO,EAAE;QACjB,MAAM,EAAE,SAAS;QACjB,OAAO,EAAEoF;OACV,CAAC;MACF;MACA,IAAI,IAAI,CAACtM,UAAU,IAAI,CAAC,IAAI,CAACC,gBAAgB,EAAE;QAC7C,IAAI,CAACA,gBAAgB,GAAG,IAAI;QAC5B,IAAI,CAACD,UAAU,CAACwM,KAAK,EAAE;;KAE1B,MAAM;MACL,IAAI,CAACvI,WAAW,CAACqI,GAAG,CAACnJ,IAAI,EAAEmJ,GAAG,CAAChJ,OAAO,EAAE,KAAK,CAAC;;EAElD;EAEQmI,wBAAwB;IAC9B,MAAMgB,GAAG,GAAQ,EAAE;IAEnB,IAAI,IAAI,CAACxL,MAAM,EAAE;MACfwL,GAAG,CAACxO,KAAK,GAAG,IAAI,CAACgD,MAAM;;IAEzB,IAAI,IAAI,CAACW,OAAO,CAACzD,IAAI,EAAE;MACrBsO,GAAG,CAACtO,IAAI,GAAG,IAAI,CAACyD,OAAO,CAACzD,IAAI;;IAE9B,IAAI,IAAI,CAACyD,OAAO,CAACvD,IAAI,EAAE;MACrBoO,GAAG,CAACpO,IAAI,GAAG,IAAI,CAACuD,OAAO,CAACvD,IAAI;;IAE9B,IAAI,IAAI,CAACuD,OAAO,CAACtD,OAAO,EAAE;MACxBmO,GAAG,CAACnO,OAAO,GAAG,IAAI,CAACsD,OAAO,CAACtD,OAAO;;IAGpC,MAAMoO,IAAI,GAAG,EAAE;IACf,IAAIC,OAAO,GAAG,KAAK;IACnB,KAAK,MAAMrK,OAAO,IAAI,IAAI,CAAC5B,WAAW,EAAE;MACtC,IAAI,IAAI,CAACA,WAAW,CAACgH,cAAc,CAACpF,OAAO,CAAC,IAAI,IAAI,CAAC5B,WAAW,CAAC4B,OAAO,CAAC,CAACsK,WAAW,EAAE;QACrFD,OAAO,GAAG,IAAI;QACd,MAAMlK,GAAG,GAAG;UACV,SAAS,EAAE;SACZ;QACD,IAAI,IAAI,CAAC/B,WAAW,CAAC4B,OAAO,CAAC,CAACoD,MAAM,EAAE;UACpCjD,GAAG,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC/B,WAAW,CAAC4B,OAAO,CAAC,CAACoD,MAAM;;QAElD,IAAI,IAAI,CAAChF,WAAW,CAAC4B,OAAO,CAAC,CAACmD,KAAK,EAAE;UACnChD,GAAG,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC/B,WAAW,CAAC4B,OAAO,CAAC,CAACmD,KAAK;;QAEhDiH,IAAI,CAACpK,OAAO,CAAC,GAAGG,GAAG;;;IAGvB,IAAIkK,OAAO,EAAE;MACXF,GAAG,CAACC,IAAI,GAAGA,IAAI;;IAEjB,OAAO;MACL9I,OAAO,EAAE6I;KACV;EACH;EAEQvH,kBAAkB,CAAC5C,OAAe,EAAEhD,OAAwB;IAClE,MAAMmN,GAAG,GAAQ;MACfnK,OAAO,EAAEA;KACV;IACD,IAAIhD,OAAO,KAAK4B,SAAS,EAAE;MACzB,IAAI5B,OAAO,CAACuN,KAAK,EAAE;QACjBJ,GAAG,CAACI,KAAK,GAAG;UACVnH,MAAM,EAAEpG,OAAO,CAACuN,KAAK,CAACnH;SACvB;QACD,IAAIpG,OAAO,CAACuN,KAAK,CAACpH,KAAK,EAAE;UACvBgH,GAAG,CAACI,KAAK,CAACpH,KAAK,GAAGnG,OAAO,CAACuN,KAAK,CAACpH,KAAK;;;MAGzC,IAAInG,OAAO,CAACwN,KAAK,KAAK5L,SAAS,EAAE;QAC/BuL,GAAG,CAACK,KAAK,GAAGxN,OAAO,CAACwN,KAAK;;MAE3B,IAAIxN,OAAO,CAACyN,OAAO,KAAK,IAAI,EAAE;QAC5BN,GAAG,CAACM,OAAO,GAAG,IAAI;;;IAGtB,OAAON,GAAG;EACZ;EAEQnI,WAAW;IACjB,IAAI,IAAI,CAACT,YAAY,EAAE,EAAE;MACvB,OAAOzC,OAAO,CAACC,OAAO,EAAE;;IAE1B,OAAO,IAAID,OAAO,CAAC,CAACoC,GAAG,EAAEC,GAAG,KAAI;MAC9B,MAAMzE,OAAO,GAAG0E,UAAU,CAAC;QACzBD,GAAG,CAAC;UAAEN,IAAI,EAAEC,kBAAU,CAACpE,OAAO;UAAEsE,OAAO,EAAE;QAAS,CAAE,CAAC;MACvD,CAAC,EAAE,IAAI,CAAC1B,OAAO,CAAC5C,OAAO,CAAC;MACxB,IAAI,CAACyC,SAAS,CAAC,IAAI,CAACkC,cAAc,EAAE,CAAC,GAAG;QACtC3E,OAAO,EAAEA,OAAO;QAChBqC,OAAO,EAAEmC,GAAG;QACZN,MAAM,EAAEO;OACT;IACH,CAAC,CAAC;EACJ;EAEQqB,YAAY,CAACV,GAAQ,EAAE4I,QAAa;IAC1C,OAAO,IAAI5L,OAAO,CAAC,CAACC,OAAO,EAAE6B,MAAM,KAAI;MACrC,IAAI,CAACwI,KAAK,CAACtH,GAAG,EAAE,KAAK,CAAC,CAACG,IAAI,CAACoH,UAAU,IAAG;QACvC;QACAtK,OAAO,CAAC2L,QAAQ,CAACrB,UAAU,CAAC5G,KAAK,CAAC,CAAC;QACnC;QACA,IAAI4G,UAAU,CAACE,IAAI,EAAE;UACnB;UACAF,UAAU,CAACE,IAAI,EAAE;;MAErB,CAAC,EAAEC,SAAS,IAAG;QACb5I,MAAM,CAAC4I,SAAS,CAAChE,KAAK,CAAC;QACvB,IAAIgE,SAAS,CAACD,IAAI,EAAE;UAClBC,SAAS,CAACD,IAAI,EAAE;;MAEpB,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEQN,aAAa,CAACpN,IAAI;IACxB,IAAI,IAAI,CAACmD,WAAW,GAAG,CAAC,EAAE;MACxB,IAAI,CAAC2L,eAAe,EAAE;;IAExB,MAAMC,OAAO,GAAG,IAAI,CAAC/M,QAAQ,CAACgN,aAAa,CAAChP,IAAI,CAAC;IACjD;IACA;IACA;IACA;IACA,IAAI,CAACgD,gBAAgB,GAAG,IAAI,CAACA,gBAAgB,CAACoD,IAAI,CAAC,MAAK;MACtD,IAAI6I,cAAc;MAClB,IAAI,CAACjM,gBAAgB,GAAG,IAAIC,OAAO,CAACC,OAAO,IAAG;QAC5C+L,cAAc,GAAG/L,OAAO;MAC1B,CAAC,CAAC;MACF,IAAI,CAACgM,qBAAqB,CAACH,OAAO,EAAEE,cAAc,CAAC;IACrD,CAAC,CAAC;EACJ;EAEQC,qBAAqB,CAACH,OAAc,EAAEE,cAAmB;IAC/D,IAAIE,CAAC,GAAqBlM,OAAO,CAACC,OAAO,EAAE;IAC3C,KAAK,MAAMgE,CAAC,IAAI6H,OAAO,EAAE;MACvB,IAAIA,OAAO,CAACxF,cAAc,CAACrC,CAAC,CAAC,EAAE;QAC7BiI,CAAC,GAAGA,CAAC,CAAC/I,IAAI,CAAC,MAAK;UACd,OAAO,IAAI,CAACgJ,cAAc,CAACL,OAAO,CAAC7H,CAAC,CAAC,CAAC;QACxC,CAAC,CAAC;;;IAGNiI,CAAC,GAAGA,CAAC,CAAC/I,IAAI,CAAC,MAAK;MACd6I,cAAc,EAAE;IAClB,CAAC,CAAC;EACJ;EAEQG,cAAc,CAACxI,KAAU;IAC/B,IAAI8G,IAAS;IACb,MAAMyB,CAAC,GAAG,IAAIlM,OAAO,CAACC,OAAO,IAAG;MAC9BwK,IAAI,GAAGxK,OAAO;IAChB,CAAC,CAAC;IAEF,IAAI0D,KAAK,KAAK7D,SAAS,IAAI6D,KAAK,KAAK,IAAI,EAAE;MACzC,IAAI,CAAC/C,MAAM,CAAC,uCAAuC,CAAC;MACpD6J,IAAI,EAAE;MACN,OAAOyB,CAAC;;IAGV,MAAM7F,EAAE,GAAG1C,KAAK,CAAC0C,EAAE;IAEnB,IAAIA,EAAE,IAAIA,EAAE,GAAG,CAAC,EAAE;MAChB,IAAI,CAAC+F,YAAY,CAACzI,KAAK,EAAE8G,IAAI,CAAC;KAC/B,MAAM;MACL,IAAI,CAAC9G,KAAK,CAACQ,IAAI,EAAE;QACf,IAAI,CAACkI,iBAAiB,CAAC5B,IAAI,CAAC;OAC7B,MAAM;QACL,IAAI,CAAC6B,WAAW,CAAC3I,KAAK,CAACQ,IAAI,EAAEsG,IAAI,CAAC;;;IAItC,OAAOyB,CAAC;EACV;EAEQ5B,KAAK,CAACtH,GAAQ,EAAEoH,WAAoB;IAC1C,OAAO,IAAIpK,OAAO,CAAC,CAACC,OAAO,EAAE6B,MAAM,KAAI;MACrCkB,GAAG,CAACqD,EAAE,GAAG,IAAI,CAACJ,cAAc,EAAE;MAC9B,IAAI,CAACsG,aAAa,CAACvJ,GAAG,CAACqD,EAAE,EAAEpG,OAAO,EAAE6B,MAAM,CAAC;MAC3C,IAAI,CAACsI,WAAW,EAAE;QAChB,IAAI,CAACoC,WAAW,CAACxJ,GAAG,CAAC;;IAEzB,CAAC,CAAC;EACJ;EAEQL,gBAAgB;IACtB,IAAI,CAAC/B,MAAM,CAAC,kBAAkB,CAAC;IAC/B,IAAI,IAAI,CAACiF,SAAS,CAACzH,aAAK,CAAC4H,UAAU,CAAC,EAAE;MACpC,IAAI,CAACF,IAAI,CAAC,YAAY,EAAE;QAAE/D,IAAI,EAAEC,uBAAe,CAACyK,aAAa;QAAEjD,MAAM,EAAE;MAAgB,CAAE,CAAC;;IAE5F,IAAI,CAACtK,OAAO,GAAG,IAAI;IACnB,IAAI,CAAC+K,kBAAkB,EAAE;EAC3B;EAEQpH,WAAW,CAACd,IAAY,EAAEyH,MAAc,EAAEK,SAAkB;IAClE,IAAI,IAAI,CAAC9D,eAAe,EAAE,EAAE;MAC1B;;IAGF,MAAM2G,aAAa,GAAG,IAAI,CAACvO,KAAK;IAEhC,MAAMwC,GAAG,GAAG;MACVoB,IAAI,EAAEA,IAAI;MACVyH,MAAM,EAAEA;KACT;IAED,IAAImD,SAAS,GAAG,KAAK;IAErB,IAAI9C,SAAS,EAAE;MACb8C,SAAS,GAAG,IAAI,CAAC9G,SAAS,CAACzH,aAAK,CAAC4H,UAAU,CAAC;KAC7C,MAAM;MACL2G,SAAS,GAAG,IAAI,CAAC9G,SAAS,CAACzH,aAAK,CAACC,YAAY,CAAC;MAC9C,IAAI,CAACuO,eAAe,CAAC;QAAE7K,IAAI,EAAEC,kBAAU,CAACC,kBAAkB;QAAEC,OAAO,EAAE;MAAc,CAAE,CAAC;;IAGxF,IAAI,CAACkE,sBAAsB,EAAE;IAE7B,IAAIsG,aAAa,KAAKtO,aAAK,CAAC4H,UAAU,EAAE;MACtC,IAAI,CAAC6G,sBAAsB,EAAE;;IAE/B,IAAIH,aAAa,KAAKtO,aAAK,CAAC+D,SAAS,EAAE;MACrC,IAAI,CAACyE,oBAAoB,EAAE;;IAG7B,IAAI+F,SAAS,EAAE;MACb,IAAI,IAAI,CAACjK,aAAa,EAAE,EAAE;QACxB,IAAI,CAACoD,IAAI,CAAC,YAAY,EAAEnF,GAAG,CAAC;OAC7B,MAAM;QACL,IAAI,CAACmF,IAAI,CAAC,cAAc,EAAEnF,GAAG,CAAC;;;IAIlC,IAAI,IAAI,CAAC/B,UAAU,IAAI,CAAC,IAAI,CAACC,gBAAgB,EAAE;MAC7C,IAAI,CAACA,gBAAgB,GAAG,IAAI;MAC5B,IAAI,CAACD,UAAU,CAACwM,KAAK,EAAE;;EAE3B;EAEQN,iBAAiB;IACvB,IAAI,CAACjI,WAAW,CAACb,yBAAiB,CAAC8K,YAAY,EAAE,cAAc,EAAE,KAAK,CAAC;EACzE;EAEQjC,SAAS;IACf,IAAI,CAACjK,MAAM,CAAC,sBAAsB,CAAC;IACnC,IAAI,CAAC,IAAI,CAACJ,OAAO,CAAC1D,QAAQ,EAAE;MAC1B,MAAM,IAAIsE,KAAK,CAAC,4CAA4C,CAAC;;IAE/D,OAAO,IAAI,CAACZ,OAAO,CAAC1D,QAAQ,CAAC,EAAE,CAAC;EAClC;EAEQiQ,QAAQ;IACd,MAAMC,QAAQ,GAAG,IAAI,CAAC9N,OAAO;IAC7B,MAAM+D,IAAI,GAAG,IAAI;IACjB,IAAI,CAAC4H,SAAS,EAAE,CAAC1H,IAAI,CAAC,UAAUtG,KAAK;MACnC,IAAImQ,QAAQ,KAAK/J,IAAI,CAAC/D,OAAO,EAAE;QAC7B;;MAEF,IAAI,CAACrC,KAAK,EAAE;QACVoG,IAAI,CAAC6H,iBAAiB,EAAE;QACxB;;MAEF7H,IAAI,CAACpD,MAAM,GAAGhD,KAAK;MACnBoG,IAAI,CAACrC,MAAM,CAAC,4BAA4B,CAAC;MAEzC,IAAI,CAACqC,IAAI,CAACR,YAAY,EAAE,EAAE;QACxB;;MAGF,MAAMO,GAAG,GAAG;QACViK,OAAO,EAAE;UAAEpQ,KAAK,EAAEoG,IAAI,CAACpD;QAAM;OAC9B;MAEDoD,IAAI,CAACqH,KAAK,CAACtH,GAAG,EAAE,KAAK,CAAC,CAACG,IAAI,CAACoH,UAAU,IAAG;QACvC;QACA,MAAMxG,MAAM,GAAGwG,UAAU,CAAC5G,KAAK,CAACsJ,OAAO;QACvChK,IAAI,CAACiK,gBAAgB,CAACnJ,MAAM,CAAC;QAC7B;QACA,IAAIwG,UAAU,CAACE,IAAI,EAAE;UACnB;UACAF,UAAU,CAACE,IAAI,EAAE;;MAErB,CAAC,EAAEC,SAAS,IAAG;QACbzH,IAAI,CAACkK,aAAa,CAACzC,SAAS,CAAChE,KAAK,CAAC;QACnC,IAAIgE,SAAS,CAACD,IAAI,EAAE;UAClBC,SAAS,CAACD,IAAI,EAAE;;MAEpB,CAAC,CAAC;IACJ,CAAC,CAAC,CAACM,KAAK,CAAC,UAAUzD,CAAC;MAClBrE,IAAI,CAAC6C,IAAI,CAAC,OAAO,EAAE;QACjBkE,IAAI,EAAE,cAAc;QACpBtD,KAAK,EAAE;UACL3E,IAAI,EAAEC,kBAAU,CAACoL,kBAAkB;UACnClL,OAAO,EAAEoF,CAAC,KAAKxH,SAAS,GAAGwH,CAAC,CAAC2D,QAAQ,EAAE,GAAG;;OAE7C,CAAC;MACFhI,IAAI,CAACtD,eAAe,GAAG2C,UAAU,CAAC,MAAMW,IAAI,CAAC8J,QAAQ,EAAE,EAAE9J,IAAI,CAACoK,qBAAqB,EAAE,CAAC;IACxF,CAAC,CAAC;EACJ;EAEQF,aAAa,CAACjC,GAAQ;IAC5B,IAAIA,GAAG,CAACnJ,IAAI,GAAG,GAAG,IAAImJ,GAAG,CAACC,SAAS,KAAK,IAAI,EAAE;MAC5C,IAAI,CAACrF,IAAI,CAAC,OAAO,EAAE;QACjBkE,IAAI,EAAE,SAAS;QACftD,KAAK,EAAEwE;OACR,CAAC;MACF,IAAI,CAACvL,eAAe,GAAG2C,UAAU,CAAC,MAAM,IAAI,CAACyK,QAAQ,EAAE,EAAE,IAAI,CAACM,qBAAqB,EAAE,CAAC;KACvF,MAAM;MACL,IAAI,CAACxK,WAAW,CAACqI,GAAG,CAACnJ,IAAI,EAAEmJ,GAAG,CAAChJ,OAAO,EAAE,KAAK,CAAC;;EAElD;EAEQmL,qBAAqB;IAC3B,OAAO,mBAAO,EAAC,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC;EAChC;EAEQH,gBAAgB,CAACnJ,MAAW;IAClC,IAAI,IAAI,CAACpE,eAAe,EAAE;MACxB6G,YAAY,CAAC,IAAI,CAAC7G,eAAe,CAAC;MAClC,IAAI,CAACA,eAAe,GAAG,IAAI;;IAE7B,IAAIoE,MAAM,CAACuJ,OAAO,EAAE;MAClB,IAAI,CAACpO,OAAO,GAAG6E,MAAM,CAACwJ,MAAM;MAC5B,IAAI,CAAC5N,eAAe,GAAG2C,UAAU,CAAC,MAAM,IAAI,CAACyK,QAAQ,EAAE,EAAE,2BAAe,EAAChJ,MAAM,CAACyJ,GAAG,CAAC,CAAC;;EAEzF;EAEQ7L,mBAAmB,CAACN,GAAwB;IAClD,IAAIA,GAAG,KAAK,IAAI,EAAE;MAChB;;IAEF,OAAO,IAAI,CAAChC,KAAK,CAACgC,GAAG,CAACH,OAAO,CAAC;EAChC;EAEUuM,YAAY,CAACpM,GAAiB;IACtC,IAAI,CAAC,IAAI,CAACoB,YAAY,EAAE,EAAE;MACxB;;IAEF,MAAM4I,GAAG,GAAG;MACVnK,OAAO,EAAEG,GAAG,CAACH;KACd;IACD,MAAM8B,GAAG,GAAG;MAAEtB,WAAW,EAAE2J;IAAG,CAAE;IAEhC,MAAMpI,IAAI,GAAG,IAAI;IAEjB,IAAI,CAACqH,KAAK,CAACtH,GAAG,EAAE,KAAK,CAAC,CAACG,IAAI,CAACoH,UAAU,IAAG;MACvC;MACA,IAAIA,UAAU,CAACE,IAAI,EAAE;QACnB;QACAF,UAAU,CAACE,IAAI,EAAE;;IAErB,CAAC,EAAEC,SAAS,IAAG;MACb,IAAIA,SAAS,CAACD,IAAI,EAAE;QAClBC,SAAS,CAACD,IAAI,EAAE;;MAElBxH,IAAI,CAACJ,WAAW,CAACb,uBAAe,CAAC0L,gBAAgB,EAAE,mBAAmB,EAAE,IAAI,CAAC;IAC/E,CAAC,CAAC;EACJ;EAEQnM,OAAO,CAACL,OAAe;IAC7B,MAAMG,GAAG,GAAG,IAAI,CAAChC,KAAK,CAAC6B,OAAO,CAAC;IAC/B,IAAI,CAACG,GAAG,EAAE;MACR,OAAO,IAAI;;IAEb,OAAOA,GAAG;EACZ;EAEQsM,YAAY,CAACzM,OAAe;IAClC,OAAO,IAAI,CAAC5B,WAAW,CAAC4B,OAAO,CAAC,KAAKpB,SAAS;EAChD;EAEQkJ,sBAAsB,CAACN,UAAmB,EAAE0B,WAAoB;IACtE,MAAMjD,QAAQ,GAAU,EAAE;IAC1B,KAAK,MAAMjG,OAAO,IAAI,IAAI,CAAC7B,KAAK,EAAE;MAChC,IAAI,CAAC,IAAI,CAACA,KAAK,CAACiH,cAAc,CAACpF,OAAO,CAAC,EAAE;QACvC;;MAEF,MAAMG,GAAG,GAAG,IAAI,CAAChC,KAAK,CAAC6B,OAAO,CAAC;MAC/B;MACA,IAAIG,GAAG,CAACuM,SAAS,KAAK,IAAI,EAAE;QAC1B;;MAEF,IAAIvM,GAAG,CAAClD,KAAK,KAAKC,yBAAiB,CAACyP,WAAW,EAAE;QAC/C;QACA,MAAM7K,GAAG,GAAG3B,GAAG,CAACyM,UAAU,CAACpF,UAAU,EAAE0B,WAAW,CAAC;QACnD,IAAIpH,GAAG,EAAE;UACPmE,QAAQ,CAAChD,IAAI,CAACnB,GAAG,CAAC;;;;IAIxB,OAAOmE,QAAQ;EACjB;EAEQqD,gBAAgB,CAACzG,MAAW;IAClC,IAAI,CAACpF,iBAAiB,GAAG,IAAI;IAC7B,IAAI,CAACM,kBAAkB,GAAG,CAAC;IAC3B,IAAI,CAACS,gBAAgB,GAAG,KAAK;IAE7B,IAAI,IAAI,CAAC+C,YAAY,EAAE,EAAE;MACvB;;IAGF,IAAI,CAACvD,OAAO,GAAG6E,MAAM,CAACwJ,MAAM;IAC5B,IAAI,CAAC1H,SAAS,CAACzH,aAAK,CAAC+D,SAAS,CAAC;IAE/B,IAAI,IAAI,CAACxC,eAAe,EAAE;MACxB6G,YAAY,CAAC,IAAI,CAAC7G,eAAe,CAAC;;IAEpC,IAAIoE,MAAM,CAACuJ,OAAO,EAAE;MAClB,IAAI,CAAC3N,eAAe,GAAG2C,UAAU,CAAC,MAAM,IAAI,CAACyK,QAAQ,EAAE,EAAE,2BAAe,EAAChJ,MAAM,CAACyJ,GAAG,CAAC,CAAC;;IAGvF,IAAI,CAACrO,QAAQ,GAAG4E,MAAM,CAACgK,OAAO;IAC9B,IAAI,CAAC3O,KAAK,GAAG2E,MAAM,CAACiK,IAAI;IAExB,IAAI,CAACpJ,aAAa,EAAE;IACpB,IAAI,CAACoE,sBAAsB,CAAC,KAAK,EAAE,KAAK,CAAC;IACzC,IAAI,CAACnE,YAAY,EAAE;IAEnB,MAAMlE,GAAG,GAAQ;MACf4M,MAAM,EAAExJ,MAAM,CAACwJ,MAAM;MACrB7H,SAAS,EAAE,IAAI,CAAC9G,UAAU,CAACwK,OAAO;KACnC;IACD,IAAIrF,MAAM,CAAChH,IAAI,EAAE;MACf4D,GAAG,CAAC5D,IAAI,GAAGgH,MAAM,CAAChH,IAAI;;IAGxB,IAAI,CAAC+I,IAAI,CAAC,WAAW,EAAEnF,GAAG,CAAC;IAE3B,IAAI,CAACsN,gBAAgB,EAAE;IAEvB,IAAI,CAACC,kBAAkB,CAACnK,MAAM,CAACuH,IAAI,IAAI,EAAE,CAAC;IAE1C,IAAIvH,MAAM,CAACoK,IAAI,IAAIpK,MAAM,CAACoK,IAAI,GAAG,CAAC,EAAE;MAClC,IAAI,CAACjO,WAAW,GAAG6D,MAAM,CAACoK,IAAI,GAAG,IAAI;MACrC,IAAI,CAAC/N,SAAS,GAAG2D,MAAM,CAACqK,IAAI,KAAK,IAAI;MACrC,IAAI,CAACvC,eAAe,EAAE;KACvB,MAAM;MACL,IAAI,CAAC3L,WAAW,GAAG,CAAC;;EAExB;EAEQgO,kBAAkB,CAAC5C,IAAyB;IAClD,KAAK,MAAMpK,OAAO,IAAIoK,IAAI,EAAE;MAC1B,IAAI,CAACA,IAAI,CAAChF,cAAc,CAACpF,OAAO,CAAC,EAAE;QACjC;;MAEF,MAAMG,GAAG,GAAGiK,IAAI,CAACpK,OAAO,CAAC;MACzB,IAAI,CAAC5B,WAAW,CAAC4B,OAAO,CAAC,GAAG;QAC1B,QAAQ,EAAEG,GAAG,CAACiD,MAAM;QACpB,OAAO,EAAEjD,GAAG,CAACgD,KAAK;QAClB,aAAa,EAAEhD,GAAG,CAACmK,WAAW,IAAI;OACnC;MACD,MAAM6C,MAAM,GAAG,IAAI,CAACC,oBAAoB,CAACpN,OAAO,EAAEG,GAAG,CAAC;MACtD,IAAI,CAACyE,IAAI,CAAC,YAAY,EAAEuI,MAAM,CAAC;;IAGjC,KAAK,MAAMnN,OAAO,IAAIoK,IAAI,EAAE;MAC1B,IAAI,CAACA,IAAI,CAAChF,cAAc,CAACpF,OAAO,CAAC,EAAE;QACjC;;MAEF,MAAMG,GAAG,GAAGiK,IAAI,CAACpK,OAAO,CAAC;MACzB,IAAIG,GAAG,CAACkN,SAAS,EAAE;QACjB,MAAMC,IAAI,GAAGnN,GAAG,CAAC2C,YAAY;QAC7B,IAAIwK,IAAI,IAAIA,IAAI,CAACtK,MAAM,GAAG,CAAC,EAAE;UAC3B,KAAK,MAAMD,CAAC,IAAIuK,IAAI,EAAE;YACpB,IAAIA,IAAI,CAAClI,cAAc,CAACrC,CAAC,CAAC,EAAE;cAC1B,IAAI,CAACwK,kBAAkB,CAACvN,OAAO,EAAEsN,IAAI,CAACvK,CAAC,CAAC,CAAC;;;;;;IAOnD,KAAK,MAAM/C,OAAO,IAAI,IAAI,CAAC5B,WAAW,EAAE;MACtC,IAAI,CAAC,IAAI,CAACA,WAAW,CAACgH,cAAc,CAACpF,OAAO,CAAC,EAAE;QAC7C;;MAEF,IAAI,CAACoK,IAAI,CAACpK,OAAO,CAAC,EAAE;QAClB,IAAI,CAAC4E,IAAI,CAAC,cAAc,EAAE;UAAE5E,OAAO,EAAEA;QAAO,CAAE,CAAC;QAC/C,OAAO,IAAI,CAAC5B,WAAW,CAAC4B,OAAO,CAAC;;;EAGtC;EAEQ4F,oBAAoB;IAC1B,IAAI,IAAI,CAACnH,eAAe,KAAK,IAAI,EAAE;MACjC6G,YAAY,CAAC,IAAI,CAAC7G,eAAe,CAAC;MAClC,IAAI,CAACA,eAAe,GAAG,IAAI;;EAE/B;EAEQkN,sBAAsB;IAC5B,IAAI,IAAI,CAAC7N,iBAAiB,KAAK,IAAI,EAAE;MACnCwH,YAAY,CAAC,IAAI,CAACxH,iBAAiB,CAAC;MACpC,IAAI,CAACA,iBAAiB,GAAG,IAAI;;EAEjC;EAEQ6H,uBAAuB;IAC7B,IAAI,IAAI,CAAC1G,kBAAkB,KAAK,IAAI,EAAE;MACpCqG,YAAY,CAAC,IAAI,CAACrG,kBAAkB,CAAC;MACrC,IAAI,CAACA,kBAAkB,GAAG,IAAI;;EAElC;EAEQ0L,eAAe;IACrB,IAAI,IAAI,CAACrL,OAAO,CAAC3C,kBAAkB,KAAK,CAAC,EAAE;MACzC;;IAEF,IAAI,CAAC,IAAI,CAAC4E,YAAY,EAAE,EAAE;MACxB;;IAEF,IAAI,CAACoE,uBAAuB,EAAE;IAC9B,IAAI,CAAC1G,kBAAkB,GAAGmC,UAAU,CAAC,MAAK;MACxC,IAAI,CAAC,IAAI,CAACG,YAAY,EAAE,EAAE;QACxB;;MAEF,IAAI,CAACI,WAAW,CAACb,uBAAe,CAAC0M,MAAM,EAAE,SAAS,EAAE,IAAI,CAAC;IAC3D,CAAC,EAAE,IAAI,CAACxO,WAAW,GAAG,IAAI,CAACM,OAAO,CAAC3C,kBAAkB,CAAC;EACxD;EAEQyQ,oBAAoB,CAACpN,OAAe,EAAE6C,MAAW;IACvD,MAAMpD,GAAG,GAAQ;MACfO,OAAO,EAAEA,OAAO;MAChByN,UAAU,EAAE,KAAK;MACjBnD,WAAW,EAAE,KAAK;MAClBoD,aAAa,EAAE,KAAK;MACpBL,SAAS,EAAE;KACZ;IACD,IAAIxK,MAAM,CAACwK,SAAS,EAAE;MACpB5N,GAAG,CAAC4N,SAAS,GAAG,IAAI;;IAEtB,IAAIxK,MAAM,CAAC4K,UAAU,EAAE;MACrBhO,GAAG,CAACgO,UAAU,GAAG,IAAI;;IAEvB,IAAI5K,MAAM,CAACyH,WAAW,EAAE;MACtB7K,GAAG,CAAC6K,WAAW,GAAG,IAAI;;IAExB,IAAIzH,MAAM,CAAC8K,cAAc,EAAE;MACzBlO,GAAG,CAACiO,aAAa,GAAG,IAAI;;IAE1B,IAAIvK,KAAK,GAAG,EAAE;IACd,IAAI,OAAO,IAAIN,MAAM,EAAE;MACrBM,KAAK,GAAGN,MAAM,CAACM,KAAK;;IAEtB,IAAIC,MAAM,GAAG,CAAC;IACd,IAAI,QAAQ,IAAIP,MAAM,EAAE;MACtBO,MAAM,GAAGP,MAAM,CAACO,MAAM;;IAExB,IAAI3D,GAAG,CAACgO,UAAU,IAAIhO,GAAG,CAAC6K,WAAW,EAAE;MACrC7K,GAAG,CAACmO,cAAc,GAAG;QACnB,QAAQ,EAAExK,MAAM;QAChB,OAAO,EAAED;OACV;;IAEH,IAAIN,MAAM,CAAChH,IAAI,EAAE;MACf4D,GAAG,CAAC5D,IAAI,GAAGgH,MAAM,CAAChH,IAAI;;IAExB,OAAO4D,GAAG;EACZ;EAEQyL,YAAY,CAACzI,KAAU,EAAE8G,IAAS;IACxC,MAAMpE,EAAE,GAAG1C,KAAK,CAAC0C,EAAE;IACnB,IAAI,EAAEA,EAAE,IAAI,IAAI,CAACzG,UAAU,CAAC,EAAE;MAC5B6K,IAAI,EAAE;MACN;;IAEF,MAAMlE,SAAS,GAAG,IAAI,CAAC3G,UAAU,CAACyG,EAAE,CAAC;IACrCG,YAAY,CAAC,IAAI,CAAC5G,UAAU,CAACyG,EAAE,CAAC,CAACzI,OAAO,CAAC;IACzC,OAAO,IAAI,CAACgC,UAAU,CAACyG,EAAE,CAAC;IAE1B,IAAI,CAAC,uBAAW,EAAC1C,KAAK,CAAC,EAAE;MACvB,MAAMoL,QAAQ,GAAGxI,SAAS,CAACwI,QAAQ;MACnC,IAAI,CAACA,QAAQ,EAAE;QACb;;MAEFA,QAAQ,CAAC;QAAEpL,KAAK;QAAE8G;MAAI,CAAE,CAAC;KAC1B,MAAM;MACL,MAAMhE,OAAO,GAAGF,SAAS,CAACE,OAAO;MACjC,IAAI,CAACA,OAAO,EAAE;QACZgE,IAAI,EAAE;QACN;;MAEF,MAAM/D,KAAK,GAAG/C,KAAK,CAAC+C,KAAK;MACzBD,OAAO,CAAC;QAAEC,KAAK;QAAE+D;MAAI,CAAE,CAAC;;EAE5B;EAEQuE,WAAW,CAAC9N,OAAe,EAAE+N,IAAS;IAC5C,MAAM5N,GAAG,GAAG,IAAI,CAACE,OAAO,CAACL,OAAO,CAAC;IACjC,IAAI,CAACG,GAAG,EAAE;MACR,IAAI,IAAI,CAACsM,YAAY,CAACzM,OAAO,CAAC,EAAE;QAC9B,MAAMP,GAAG,GAAG;UAAEO,OAAO,EAAEA,OAAO;UAAEgO,IAAI,EAAE,IAAI,CAACC,oBAAoB,CAACF,IAAI,CAACC,IAAI;QAAC,CAAE;QAC5E,IAAI,CAACpJ,IAAI,CAAC,MAAM,EAAEnF,GAAG,CAAC;;MAExB;;IAEF;IACAU,GAAG,CAAC2N,WAAW,CAACC,IAAI,CAAC;EACvB;EAEQG,YAAY,CAAClO,OAAe,EAAEmO,KAAU;IAC9C,MAAMhO,GAAG,GAAG,IAAI,CAACE,OAAO,CAACL,OAAO,CAAC;IACjC,IAAI,CAACG,GAAG,EAAE;MACR,IAAI,IAAI,CAACsM,YAAY,CAACzM,OAAO,CAAC,EAAE;QAC9B,MAAMP,GAAG,GAAG;UAAEO,OAAO,EAAEA,OAAO;UAAEgO,IAAI,EAAE,IAAI,CAACC,oBAAoB,CAACE,KAAK,CAACH,IAAI;QAAC,CAAE;QAC7E,IAAI,CAACpJ,IAAI,CAAC,OAAO,EAAEnF,GAAG,CAAC;;MAEzB;;IAEF;IACAU,GAAG,CAAC+N,YAAY,CAACC,KAAK,CAAC;EACzB;EAEQC,kBAAkB,CAACpO,OAAe,EAAEQ,WAAgB;IAC1D,MAAML,GAAG,GAAG,IAAI,CAACE,OAAO,CAACL,OAAO,CAAC;IACjC,IAAI,CAACG,GAAG,EAAE;MACR,IAAI,IAAI,CAACsM,YAAY,CAACzM,OAAO,CAAC,EAAE;QAC9B,OAAO,IAAI,CAAC5B,WAAW,CAAC4B,OAAO,CAAC;QAChC,IAAI,CAAC4E,IAAI,CAAC,cAAc,EAAE;UAAE5E,OAAO,EAAEA;QAAO,CAAE,CAAC;;MAEjD;;IAEF,IAAIQ,WAAW,CAACK,IAAI,GAAG,IAAI,EAAE;MAC3B;MACAV,GAAG,CAACkO,gBAAgB,CAAC7N,WAAW,CAACK,IAAI,EAAEL,WAAW,CAAC8H,MAAM,EAAE,KAAK,CAAC;KAClE,MAAM;MACL;MACAnI,GAAG,CAAC2F,eAAe,CAACtF,WAAW,CAACK,IAAI,EAAEL,WAAW,CAAC8H,MAAM,CAAC;;EAE7D;EAEQgG,gBAAgB,CAACtO,OAAe,EAAEG,GAAQ;IAChD,IAAI,CAAC/B,WAAW,CAAC4B,OAAO,CAAC,GAAG;MAC1B,QAAQ,EAAEG,GAAG,CAACiD,MAAM;MACpB,OAAO,EAAEjD,GAAG,CAACgD,KAAK;MAClB,aAAa,EAAEhD,GAAG,CAACmK,WAAW,IAAI;KACnC;IACD,IAAI,CAAC1F,IAAI,CAAC,YAAY,EAAE,IAAI,CAACwI,oBAAoB,CAACpN,OAAO,EAAEG,GAAG,CAAC,CAAC;EAClE;EAEQoO,iBAAiB,CAAC7M,UAAe;IACvC,MAAMb,IAAI,GAAGa,UAAU,CAACb,IAAI;IAC5B,IAAI8H,SAAS,GAAG,IAAI;IACpB,IAAK9H,IAAI,IAAI,IAAI,IAAIA,IAAI,GAAG,IAAI,IAAMA,IAAI,IAAI,IAAI,IAAIA,IAAI,GAAG,IAAK,EAAE;MAClE8H,SAAS,GAAG,KAAK;;IAEnB,IAAI,CAAChH,WAAW,CAACd,IAAI,EAAEa,UAAU,CAAC4G,MAAM,EAAEK,SAAS,CAAC;EACtD;EAEQzF,sBAAsB,CAAClD,OAAe,EAAEwO,GAAQ;IACtD,MAAM/O,GAAG,GAAQ;MACfO,OAAO,EAAEA,OAAO;MAChBnE,IAAI,EAAE2S,GAAG,CAAC3S;KACX;IACD,IAAI2S,GAAG,CAACpL,MAAM,EAAE;MACd3D,GAAG,CAAC2D,MAAM,GAAGoL,GAAG,CAACpL,MAAM;;IAEzB,IAAIoL,GAAG,CAACR,IAAI,EAAE;MACZvO,GAAG,CAACuO,IAAI,GAAG,IAAI,CAACC,oBAAoB,CAACO,GAAG,CAACR,IAAI,CAAC;;IAEhD,IAAIQ,GAAG,CAACC,IAAI,EAAE;MACZhP,GAAG,CAACgP,IAAI,GAAGD,GAAG,CAACC,IAAI;;IAErB,OAAOhP,GAAG;EACZ;EAEQwO,oBAAoB,CAACS,UAAe;IAC1C,MAAMV,IAAI,GAAQ;MAChB3B,MAAM,EAAEqC,UAAU,CAACrC,MAAM;MACzBsC,IAAI,EAAED,UAAU,CAACC;KAClB;IACD,IAAID,UAAU,CAACE,SAAS,EAAE;MACxBZ,IAAI,CAACa,QAAQ,GAAGH,UAAU,CAACE,SAAS;;IAEtC,IAAIF,UAAU,CAACI,SAAS,EAAE;MACxBd,IAAI,CAACe,QAAQ,GAAGL,UAAU,CAACI,SAAS;;IAEtC,OAAOd,IAAI;EACb;EAEQT,kBAAkB,CAACvN,OAAe,EAAEwO,GAAQ;IAClD,MAAMrO,GAAG,GAAG,IAAI,CAACE,OAAO,CAACL,OAAO,CAAC;IACjC,IAAI,CAACG,GAAG,EAAE;MACR,IAAI,IAAI,CAACsM,YAAY,CAACzM,OAAO,CAAC,EAAE;QAC9B,MAAMP,GAAG,GAAG,IAAI,CAACyD,sBAAsB,CAAClD,OAAO,EAAEwO,GAAG,CAAC;QACrD,IAAI,CAAC5J,IAAI,CAAC,aAAa,EAAEnF,GAAG,CAAC;QAC7B,IAAI+O,GAAG,CAACpL,MAAM,KAAKxE,SAAS,EAAE;UAC5B,IAAI,CAACR,WAAW,CAAC4B,OAAO,CAAC,CAACoD,MAAM,GAAGoL,GAAG,CAACpL,MAAM;;;MAGjD;;IAEF;IACAjD,GAAG,CAACoN,kBAAkB,CAACiB,GAAG,CAAC;EAC7B;EAEQQ,cAAc,CAAChO,OAAY;IACjC,IAAI,CAAC4D,IAAI,CAAC,SAAS,EAAE;MAAE/I,IAAI,EAAEmF,OAAO,CAACnF;IAAI,CAAE,CAAC;EAC9C;EAEQsP,iBAAiB,CAAC5B,IAAS;IACjC,IAAI,IAAI,CAACrK,SAAS,EAAE;MAClB,MAAM4C,GAAG,GAAG,EAAE;MACd,IAAI,CAACK,sBAAsB,CAAC,CAACL,GAAG,CAAC,CAAC;;IAEpCyH,IAAI,EAAE;EACR;EAEQ6B,WAAW,CAACvP,IAAS,EAAE0N,IAAS;IACtC,MAAMvJ,OAAO,GAAGnE,IAAI,CAACmE,OAAO;IAC5B,IAAInE,IAAI,CAAC2S,GAAG,EAAE;MACZ,IAAI,CAACjB,kBAAkB,CAACvN,OAAO,EAAEnE,IAAI,CAAC2S,GAAG,CAAC;KAC3C,MAAM,IAAI3S,IAAI,CAACmF,OAAO,EAAE;MACvB,IAAI,CAACgO,cAAc,CAACnT,IAAI,CAACmF,OAAO,CAAC;KAClC,MAAM,IAAInF,IAAI,CAACkS,IAAI,EAAE;MACpB,IAAI,CAACD,WAAW,CAAC9N,OAAO,EAAEnE,IAAI,CAACkS,IAAI,CAAC;KACrC,MAAM,IAAIlS,IAAI,CAACsS,KAAK,EAAE;MACrB,IAAI,CAACD,YAAY,CAAClO,OAAO,EAAEnE,IAAI,CAACsS,KAAK,CAAC;KACvC,MAAM,IAAItS,IAAI,CAAC2E,WAAW,EAAE;MAC3B,IAAI,CAAC4N,kBAAkB,CAACpO,OAAO,EAAEnE,IAAI,CAAC2E,WAAW,CAAC;KACnD,MAAM,IAAI3E,IAAI,CAACoT,SAAS,EAAE;MACzB,IAAI,CAACX,gBAAgB,CAACtO,OAAO,EAAEnE,IAAI,CAACoT,SAAS,CAAC;KAC/C,MAAM,IAAIpT,IAAI,CAAC6F,UAAU,EAAE;MAC1B,IAAI,CAAC6M,iBAAiB,CAAC1S,IAAI,CAAC6F,UAAU,CAAC;;IAEzC6H,IAAI,EAAE;EACR;EAEQ3F,MAAM;IACZ,MAAMqC,QAAQ,GAAG,IAAI,CAAC3H,SAAS,CAAC4Q,KAAK,CAAC,CAAC,CAAC;IACxC,IAAI,CAAC5Q,SAAS,GAAG,EAAE;IACnB,IAAI,CAAC6D,sBAAsB,CAAC8D,QAAQ,CAAC;EACvC;EAEQ7D,kBAAkB,CAACvB,IAAY,EAAEG,OAAe,EAAEiJ,SAAmB;IAC3E,MAAMkF,SAAS,GAAQ;MACrBtO,IAAI,EAAEA,IAAI;MACVG,OAAO,EAAEA;KACV;IACD,IAAIiJ,SAAS,EAAE;MACbkF,SAAS,CAAClF,SAAS,GAAG,IAAI;;IAE5B,OAAOkF,SAAS;EAClB;EAEQ9D,aAAa,CAAClG,EAAU,EAAE0I,QAAa,EAAEtI,OAAY;IAC3D,IAAI,CAAC7G,UAAU,CAACyG,EAAE,CAAC,GAAG;MACpB0I,QAAQ,EAAEA,QAAQ;MAClBtI,OAAO,EAAEA,OAAO;MAChB7I,OAAO,EAAE;KACV;IACD,IAAI,CAACgC,UAAU,CAACyG,EAAE,CAAC,CAACzI,OAAO,GAAG0E,UAAU,CAAC,MAAK;MAC5C,OAAO,IAAI,CAAC1C,UAAU,CAACyG,EAAE,CAAC;MAC1B,IAAI,sBAAU,EAACI,OAAO,CAAC,EAAE;QACvBA,OAAO,CAAC;UAAEC,KAAK,EAAE,IAAI,CAACpD,kBAAkB,CAACtB,kBAAU,CAACpE,OAAO,EAAE,SAAS;QAAC,CAAE,CAAC;;IAE9E,CAAC,EAAE,IAAI,CAAC4C,OAAO,CAAC5C,OAAO,CAAC;EAC1B;EAEQ4O,WAAW,CAACpF,OAAY;IAC9B,IAAI,IAAI,CAAC3H,SAAS,EAAE;MAClB,IAAI,CAACD,SAAS,CAAC2E,IAAI,CAACiD,OAAO,CAAC;KAC7B,MAAM;MACL,IAAI,CAAC/D,sBAAsB,CAAC,CAAC+D,OAAO,CAAC,CAAC;;EAE1C;EAEQ7E,cAAc;IACpB,OAAO,EAAE,IAAI,CAACjC,UAAU;EAC1B;EAEQ2N,gBAAgB;IACtB,KAAK,MAAM5H,EAAE,IAAI,IAAI,CAAChG,SAAS,EAAE;MAC/B,IAAI,IAAI,CAACA,SAAS,CAACgG,EAAE,CAAC,CAACzI,OAAO,EAAE;QAC9B4I,YAAY,CAAC,IAAI,CAACnG,SAAS,CAACgG,EAAE,CAAC,CAACzI,OAAO,CAAC;;MAE1C,IAAI,CAACyC,SAAS,CAACgG,EAAE,CAAC,CAACpG,OAAO,EAAE;MAC5B,OAAO,IAAI,CAACI,SAAS,CAACgG,EAAE,CAAC;;EAE7B;EAEQuG,eAAe,CAAC1B,GAAQ;IAC9B,KAAK,MAAM7E,EAAE,IAAI,IAAI,CAAChG,SAAS,EAAE;MAC/B,IAAI,IAAI,CAACA,SAAS,CAACgG,EAAE,CAAC,CAACzI,OAAO,EAAE;QAC9B4I,YAAY,CAAC,IAAI,CAACnG,SAAS,CAACgG,EAAE,CAAC,CAACzI,OAAO,CAAC;;MAE1C,IAAI,CAACyC,SAAS,CAACgG,EAAE,CAAC,CAACvE,MAAM,CAACoJ,GAAG,CAAC;MAC9B,OAAO,IAAI,CAAC7K,SAAS,CAACgG,EAAE,CAAC;;EAE7B;;AA5lDFiK;AA+lDAxS,UAAU,CAACyS,iBAAiB,GAAGnS,yBAAiB;AAChDN,UAAU,CAAC0S,KAAK,GAAGpS,aAAK","names":["defaults","protocol","token","getToken","data","debug","name","version","fetch","readableStream","websocket","eventsource","sockjs","sockjsOptions","emulationEndpoint","minReconnectDelay","maxReconnectDelay","timeout","maxServerPingDelay","Centrifuge","events_1","constructor","endpoint","options","state","types_1","Disconnected","_endpoint","_emulation","_transports","_currentTransportIndex","_triedAllTransports","_transportWasOpen","_transport","_transportClosed","_encoder","_decoder","_reconnectTimeout","_reconnectAttempts","_client","_session","_node","_subs","_serverSubs","_commandId","_commands","_batching","_refreshRequired","_refreshTimeout","_callbacks","_token","undefined","_dispatchPromise","Promise","resolve","_serverPing","_serverPingTimeout","_sendPong","_promises","_promiseId","_debugEnabled","_config","_configure","on","ctx","_debug","oldState","newState","Function","prototype","newSubscription","channel","getSubscription","Error","sub","subscription_1","_getSub","removeSubscription","Unsubscribed","unsubscribe","_removeSubscription","subscriptions","ready","reject","code","codes_1","clientDisconnected","message","Connected","res","rej","setTimeout","_nextPromiseId","connect","_isConnected","_isConnecting","_startConnecting","disconnect","_disconnect","disconnectCalled","send","cmd","self","_methodCall","then","sent","_transportSendCommands","_createErrorObject","transportWriteError","rpc","method","_callPromise","reply","publish","history","_getHistoryRequest","result","publications","i","length","push","_getPublicationContext","epoch","offset","presence","presenceStats","presence_stats","num_users","num_clients","startBatching","stopBatching","_flush","args","_setFormat","format","_formatOverride","json_1","_format","globalThis","localStorage","getItem","Array","transportConfig","transport","transportName","indexOf","_setState","emit","_isDisconnected","Connecting","_nextCommandId","_getReconnectDelay","delay","_clearOutgoingRequests","id","hasOwnProperty","callbacks","clearTimeout","errback","error","connectionClosed","_clearConnectedState","_clearServerPingTimeout","_clearRefreshTimeout","Subscribed","_setSubscribing","transportClosed","_handleWriteError","commands","command","encodeCommands","e","_initializeTransport","WebSocket","SockJS","EventSource","fetchFunc","ReadableStream","transport_websocket_1","supported","count","transportEndpoint","transport_webtransport_1","webtransport","WebTransport","decoder","encoder","transport_http_stream_1","transport_sse_1","transport_sockjs_1","wasOpen","optimistic","initialCommands","emulation","connectCommand","_sendConnect","subscribeCommands","_sendSubscribeCommands","initialData","initialize","onOpen","subName","onError","onClose","closeEvent","reason","needReconnect","advice","JSON","parse","reconnect","messageSizeLimit","isInitialHandshake","type","_startReconnecting","onMessage","_dataReceived","skipSending","_constructConnectCommand","_call","resolveCtx","_connectResponse","next","rejectCtx","_connectError","needTokenRefresh","_getToken","_failUnauthorized","catch","clientConnectToken","toString","err","temporary","close","req","subs","hasSubs","recoverable","since","limit","reverse","resultCB","_waitServerPing","replies","decodeReplies","finishDispatch","_dispatchSynchronized","p","_dispatchReply","_handleReply","_handleServerPing","_handlePush","_registerCall","_addCommand","connectCalled","previousState","needEvent","_rejectPromises","_clearReconnectTimeout","unauthorized","_refresh","clientId","refresh","_refreshResponse","_refreshError","clientRefreshToken","_getRefreshRetryDelay","expires","client","ttl","_unsubscribe","unsubscribeError","_isServerSub","_inflight","Subscribing","_subscribe","session","node","_resolvePromises","_processServerSubs","ping","pong","subCtx","_getSubscribeContext","recovered","pubs","_handlePublication","noPing","positioned","wasRecovering","was_recovering","streamPosition","callback","_handleJoin","join","info","_getJoinLeaveContext","_handleLeave","leave","_handleUnsubscribe","_setUnsubscribed","_handleSubscribe","_handleDisconnect","pub","tags","clientInfo","user","conn_info","connInfo","chan_info","chanInfo","_handleMessage","subscribe","slice","errObject","exports","SubscriptionState","State"],"sources":["../src/centrifuge.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}