{"ast":null,"code":"import { GET_MESSAGES_SUCCESS, GET_MESSAGES_FAILURE, ADD_NEW_MESSAGE } from \"../constants/reducer\";\nconst getMessagesSuccess = messages => ({\n  type: GET_MESSAGES_SUCCESS,\n  payload: messages\n});\nconst getMessagesFailure = error => ({\n  type: GET_MESSAGES_FAILURE,\n  payload: {\n    error // error: error\n  }\n});\n\nconst addNewMessage = message => ({\n  type: ADD_NEW_MESSAGE,\n  payload: message\n});\nexport const getMessages = chat_id => {\n  return (dispatch, getState) => {\n    console.log(\"state: \", getState());\n    if (chat_id === -1) {\n      const pollItems = () => {\n        fetch(`https://tt-front.vercel.app/messages`).then(resp => resp.json()).then(data => dispatch(getMessagesSuccess(data.reverse())));\n      };\n      setInterval(() => pollItems(), 3000);\n      return;\n    }\n    fetch(`http://localhost:9000/api/v1/chats/messages_in_chat/${chat_id}/`).then(res => res.json()).then(data => {\n      dispatch(getMessagesSuccess(data));\n    }).catch(err => {\n      dispatch(getMessagesFailure(err.message));\n    });\n  };\n};\nexport const newMessage = message => {\n  return (dispatch, getState) => {\n    if (message.chat_id === -1) {\n      fetch(`https://tt-front.vercel.app/message`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(message)\n      });\n      return;\n    }\n    fetch(`http://localhost:9000/api/v1/chats/messages_in_chat/${message.chat_id}/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(message)\n    });\n  };\n};\nexport const renderNewMessage = message => {\n  return (dispatch, getState) => {\n    dispatch(addNewMessage(message));\n  };\n};","map":{"version":3,"names":["GET_MESSAGES_SUCCESS","GET_MESSAGES_FAILURE","ADD_NEW_MESSAGE","getMessagesSuccess","messages","type","payload","getMessagesFailure","error","addNewMessage","message","getMessages","chat_id","dispatch","getState","console","log","pollItems","fetch","then","resp","json","data","reverse","setInterval","res","catch","err","newMessage","method","headers","body","JSON","stringify","renderNewMessage"],"sources":["/home/dmitrii/Dev/vk/front/2022-2-VK-EDU-FS-Frontend-D-Oreshkin/react-chat/src/actions/messageAction.js"],"sourcesContent":["import {\n  GET_MESSAGES_SUCCESS,\n  GET_MESSAGES_FAILURE,\n  ADD_NEW_MESSAGE,\n} from \"../constants/reducer\";\n\nconst getMessagesSuccess = (messages) => ({\n  type: GET_MESSAGES_SUCCESS,\n  payload: messages,\n});\n\nconst getMessagesFailure = (error) => ({\n  type: GET_MESSAGES_FAILURE,\n  payload: {\n    error, // error: error\n  },\n});\n\nconst addNewMessage = (message) => ({\n  type: ADD_NEW_MESSAGE,\n  payload: message,\n});\n\nexport const getMessages = (chat_id) => {\n  return (dispatch, getState) => {\n    console.log(\"state: \", getState());\n    if (chat_id === -1) {\n      const pollItems = () => {\n        fetch(`https://tt-front.vercel.app/messages`)\n          .then((resp) => resp.json())\n          .then((data) => dispatch(getMessagesSuccess(data.reverse())));\n      };\n      setInterval(() => pollItems(), 3000);\n      return;\n    }\n\n    fetch(`http://localhost:9000/api/v1/chats/messages_in_chat/${chat_id}/`)\n      .then((res) => res.json())\n      .then((data) => {\n        dispatch(getMessagesSuccess(data));\n      })\n      .catch((err) => {\n        dispatch(getMessagesFailure(err.message));\n      });\n  };\n};\n\nexport const newMessage = (message) => {\n  return (dispatch, getState) => {\n    if (message.chat_id === -1) {\n      fetch(`https://tt-front.vercel.app/message`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(message),\n      });\n      return;\n    }\n    fetch(\n      `http://localhost:9000/api/v1/chats/messages_in_chat/${message.chat_id}/`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(message),\n      }\n    );\n  };\n};\n\nexport const renderNewMessage = (message) => {\n  return (dispatch, getState) => {\n    dispatch(addNewMessage(message));\n  };\n};\n"],"mappings":"AAAA,SACEA,oBAAoB,EACpBC,oBAAoB,EACpBC,eAAe,QACV,sBAAsB;AAE7B,MAAMC,kBAAkB,GAAIC,QAAQ,KAAM;EACxCC,IAAI,EAAEL,oBAAoB;EAC1BM,OAAO,EAAEF;AACX,CAAC,CAAC;AAEF,MAAMG,kBAAkB,GAAIC,KAAK,KAAM;EACrCH,IAAI,EAAEJ,oBAAoB;EAC1BK,OAAO,EAAE;IACPE,KAAK,CAAE;EACT;AACF,CAAC,CAAC;;AAEF,MAAMC,aAAa,GAAIC,OAAO,KAAM;EAClCL,IAAI,EAAEH,eAAe;EACrBI,OAAO,EAAEI;AACX,CAAC,CAAC;AAEF,OAAO,MAAMC,WAAW,GAAIC,OAAO,IAAK;EACtC,OAAO,CAACC,QAAQ,EAAEC,QAAQ,KAAK;IAC7BC,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEF,QAAQ,EAAE,CAAC;IAClC,IAAIF,OAAO,KAAK,CAAC,CAAC,EAAE;MAClB,MAAMK,SAAS,GAAG,MAAM;QACtBC,KAAK,CAAE,sCAAqC,CAAC,CAC1CC,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,IAAI,EAAE,CAAC,CAC3BF,IAAI,CAAEG,IAAI,IAAKT,QAAQ,CAACV,kBAAkB,CAACmB,IAAI,CAACC,OAAO,EAAE,CAAC,CAAC,CAAC;MACjE,CAAC;MACDC,WAAW,CAAC,MAAMP,SAAS,EAAE,EAAE,IAAI,CAAC;MACpC;IACF;IAEAC,KAAK,CAAE,uDAAsDN,OAAQ,GAAE,CAAC,CACrEO,IAAI,CAAEM,GAAG,IAAKA,GAAG,CAACJ,IAAI,EAAE,CAAC,CACzBF,IAAI,CAAEG,IAAI,IAAK;MACdT,QAAQ,CAACV,kBAAkB,CAACmB,IAAI,CAAC,CAAC;IACpC,CAAC,CAAC,CACDI,KAAK,CAAEC,GAAG,IAAK;MACdd,QAAQ,CAACN,kBAAkB,CAACoB,GAAG,CAACjB,OAAO,CAAC,CAAC;IAC3C,CAAC,CAAC;EACN,CAAC;AACH,CAAC;AAED,OAAO,MAAMkB,UAAU,GAAIlB,OAAO,IAAK;EACrC,OAAO,CAACG,QAAQ,EAAEC,QAAQ,KAAK;IAC7B,IAAIJ,OAAO,CAACE,OAAO,KAAK,CAAC,CAAC,EAAE;MAC1BM,KAAK,CAAE,qCAAoC,EAAE;QAC3CW,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACvB,OAAO;MAC9B,CAAC,CAAC;MACF;IACF;IACAQ,KAAK,CACF,uDAAsDR,OAAO,CAACE,OAAQ,GAAE,EACzE;MACEiB,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACvB,OAAO;IAC9B,CAAC,CACF;EACH,CAAC;AACH,CAAC;AAED,OAAO,MAAMwB,gBAAgB,GAAIxB,OAAO,IAAK;EAC3C,OAAO,CAACG,QAAQ,EAAEC,QAAQ,KAAK;IAC7BD,QAAQ,CAACJ,aAAa,CAACC,OAAO,CAAC,CAAC;EAClC,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}