{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HttpStreamTransport = void 0;\n/** @internal */\nclass HttpStreamTransport {\n  constructor(endpoint, options) {\n    this.endpoint = endpoint;\n    this.options = options;\n    this._abortController = null;\n    this._utf8decoder = new TextDecoder();\n    this._protocol = 'json';\n  }\n  name() {\n    return 'http_stream';\n  }\n  subName() {\n    return 'http_stream';\n  }\n  emulation() {\n    return true;\n  }\n  _handleErrors(response) {\n    if (!response.ok) throw new Error(response.status);\n    return response;\n  }\n  _fetchEventTarget(self, endpoint, options) {\n    const eventTarget = new EventTarget();\n    // fetch with connection timeout maybe? https://github.com/github/fetch/issues/175\n    const fetchFunc = self.options.fetch;\n    fetchFunc(endpoint, options).then(self._handleErrors).then(response => {\n      eventTarget.dispatchEvent(new Event('open'));\n      let jsonStreamBuf = '';\n      let jsonStreamPos = 0;\n      let protoStreamBuf = new Uint8Array();\n      const reader = response.body.getReader();\n      return new self.options.readableStream({\n        start(controller) {\n          function pump() {\n            return reader.read().then(_ref => {\n              let {\n                done,\n                value\n              } = _ref;\n              // When no more data needs to be consumed, close the stream\n              if (done) {\n                eventTarget.dispatchEvent(new Event('close'));\n                controller.close();\n                return;\n              }\n              try {\n                if (self._protocol === 'json') {\n                  jsonStreamBuf += self._utf8decoder.decode(value);\n                  while (jsonStreamPos < jsonStreamBuf.length) {\n                    if (jsonStreamBuf[jsonStreamPos] === '\\n') {\n                      const line = jsonStreamBuf.substring(0, jsonStreamPos);\n                      eventTarget.dispatchEvent(new MessageEvent('message', {\n                        data: line\n                      }));\n                      jsonStreamBuf = jsonStreamBuf.substring(jsonStreamPos + 1);\n                      jsonStreamPos = 0;\n                    } else {\n                      ++jsonStreamPos;\n                    }\n                  }\n                } else {\n                  const mergedArray = new Uint8Array(protoStreamBuf.length + value.length);\n                  mergedArray.set(protoStreamBuf);\n                  mergedArray.set(value, protoStreamBuf.length);\n                  protoStreamBuf = mergedArray;\n                  while (true) {\n                    const result = self.options.decoder.decodeReply(protoStreamBuf);\n                    if (result.ok) {\n                      const data = protoStreamBuf.slice(0, result.pos);\n                      eventTarget.dispatchEvent(new MessageEvent('message', {\n                        data: data\n                      }));\n                      protoStreamBuf = protoStreamBuf.slice(result.pos);\n                      continue;\n                    }\n                    break;\n                  }\n                }\n              } catch (error) {\n                // @ts-ignore - improve later.\n                eventTarget.dispatchEvent(new Event('error', {\n                  detail: error\n                }));\n                eventTarget.dispatchEvent(new Event('close'));\n                controller.close();\n                return;\n              }\n              pump();\n            }).catch(function (e) {\n              // @ts-ignore - improve later.\n              eventTarget.dispatchEvent(new Event('error', {\n                detail: e\n              }));\n              eventTarget.dispatchEvent(new Event('close'));\n              controller.close();\n              return;\n            });\n          }\n          return pump();\n        }\n      });\n    }).catch(error => {\n      // @ts-ignore - improve later.\n      eventTarget.dispatchEvent(new Event('error', {\n        detail: error\n      }));\n      eventTarget.dispatchEvent(new Event('close'));\n    });\n    return eventTarget;\n  }\n  supported() {\n    return this.options.fetch !== null && this.options.readableStream !== null && typeof TextDecoder !== 'undefined' && typeof AbortController !== 'undefined' && typeof EventTarget !== 'undefined' && typeof Event !== 'undefined' && typeof MessageEvent !== 'undefined' && typeof Error !== 'undefined';\n  }\n  initialize(protocol, callbacks, initialData) {\n    this._protocol = protocol;\n    this._abortController = new AbortController();\n    let headers;\n    let body;\n    if (protocol === 'json') {\n      headers = {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      };\n      body = initialData;\n    } else {\n      headers = {\n        'Accept': 'application/octet-stream',\n        'Content-Type': 'application/octet-stream'\n      };\n      body = initialData;\n    }\n    const fetchOptions = {\n      method: 'POST',\n      headers: headers,\n      body: body,\n      mode: 'cors',\n      credentials: 'same-origin',\n      cache: 'no-cache',\n      signal: this._abortController.signal\n    };\n    const eventTarget = this._fetchEventTarget(this, this.endpoint, fetchOptions);\n    eventTarget.addEventListener('open', () => {\n      callbacks.onOpen();\n    });\n    eventTarget.addEventListener('error', e => {\n      this._abortController.abort();\n      callbacks.onError(e);\n    });\n    eventTarget.addEventListener('close', () => {\n      this._abortController.abort();\n      callbacks.onClose({\n        code: 4,\n        reason: 'connection closed'\n      });\n    });\n    eventTarget.addEventListener('message', e => {\n      callbacks.onMessage(e.data);\n    });\n  }\n  close() {\n    this._abortController.abort();\n  }\n  send(data, session, node) {\n    let headers;\n    let body;\n    const req = {\n      session: session,\n      node: node,\n      data: data\n    };\n    if (this._protocol === 'json') {\n      headers = {\n        'Content-Type': 'application/json'\n      };\n      body = JSON.stringify(req);\n    } else {\n      headers = {\n        'Content-Type': 'application/octet-stream'\n      };\n      body = this.options.encoder.encodeEmulationRequest(req);\n    }\n    const fetchFunc = this.options.fetch;\n    const fetchOptions = {\n      method: 'POST',\n      headers: headers,\n      body: body,\n      mode: 'cors',\n      credentials: 'same-origin',\n      cache: 'no-cache'\n    };\n    fetchFunc(this.options.emulationEndpoint, fetchOptions);\n  }\n}\nexports.HttpStreamTransport = HttpStreamTransport;","map":{"version":3,"mappings":"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","names":["HttpStreamTransport","constructor","endpoint","options","_abortController","_utf8decoder","TextDecoder","_protocol","name","subName","emulation","_handleErrors","response","ok","Error","status","_fetchEventTarget","self","eventTarget","EventTarget","fetchFunc","fetch","then","dispatchEvent","Event","jsonStreamBuf","jsonStreamPos","protoStreamBuf","Uint8Array","reader","body","getReader","readableStream","start","controller","pump","read","done","value","close","decode","length","line","substring","MessageEvent","data","mergedArray","set","result","decoder","decodeReply","slice","pos","error","detail","catch","e","supported","AbortController","initialize","protocol","callbacks","initialData","headers","fetchOptions","method","mode","credentials","cache","signal","addEventListener","onOpen","abort","onError","onClose","code","reason","onMessage","send","session","node","req","JSON","stringify","encoder","encodeEmulationRequest","emulationEndpoint","exports"],"sources":["../src/transport_http_stream.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}