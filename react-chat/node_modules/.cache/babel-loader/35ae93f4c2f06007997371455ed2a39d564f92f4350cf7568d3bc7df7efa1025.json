{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SseTransport = void 0;\n/** @internal */\nclass SseTransport {\n  constructor(endpoint, options) {\n    this.endpoint = endpoint;\n    this.options = options;\n    this._protocol = 'json';\n    this._transport = null;\n    this._onClose = null;\n  }\n  name() {\n    return 'sse';\n  }\n  subName() {\n    return 'sse';\n  }\n  emulation() {\n    return true;\n  }\n  supported() {\n    return this.options.eventsource !== null && this.options.fetch !== null;\n  }\n  initialize(_protocol, callbacks, initialData) {\n    let url;\n    if (globalThis && globalThis.document && globalThis.document.baseURI) {\n      // Handle case when endpoint is relative, like //example.com/connection/sse\n      url = new URL(this.endpoint, globalThis.document.baseURI);\n    } else {\n      url = new URL(this.endpoint);\n    }\n    url.searchParams.append('cf_connect', initialData);\n    const eventsourceOptions = {};\n    const eventSource = new this.options.eventsource(url.toString(), eventsourceOptions);\n    this._transport = eventSource;\n    const self = this;\n    eventSource.onopen = function () {\n      callbacks.onOpen();\n    };\n    eventSource.onerror = function (e) {\n      eventSource.close();\n      callbacks.onError(e);\n      callbacks.onClose({\n        code: 4,\n        reason: 'connection closed'\n      });\n    };\n    eventSource.onmessage = function (e) {\n      callbacks.onMessage(e.data);\n    };\n    self._onClose = function () {\n      callbacks.onClose({\n        code: 4,\n        reason: 'connection closed'\n      });\n    };\n  }\n  close() {\n    this._transport.close();\n    if (this._onClose !== null) {\n      this._onClose();\n    }\n  }\n  send(data, session, node) {\n    const req = {\n      session: session,\n      node: node,\n      data: data\n    };\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    const body = JSON.stringify(req);\n    const fetchFunc = this.options.fetch;\n    const fetchOptions = {\n      method: 'POST',\n      headers: headers,\n      body: body,\n      mode: 'cors',\n      credentials: 'same-origin',\n      cache: 'no-cache'\n    };\n    fetchFunc(this.options.emulationEndpoint, fetchOptions);\n  }\n}\nexports.SseTransport = SseTransport;","map":{"version":3,"mappings":";;;;;;AAAA;AACA,MAAaA,YAAY;EAOvBC,YAAYC,QAAgB,EAAEC,OAAY;IACxC,IAAI,CAACD,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,SAAS,GAAG,MAAM;IACvB,IAAI,CAACC,UAAU,GAAG,IAAI;IACtB,IAAI,CAACC,QAAQ,GAAG,IAAI;EACtB;EAEAC,IAAI;IACF,OAAO,KAAK;EACd;EAEAC,OAAO;IACL,OAAO,KAAK;EACd;EAEAC,SAAS;IACP,OAAO,IAAI;EACb;EAEAC,SAAS;IACP,OAAO,IAAI,CAACP,OAAO,CAACQ,WAAW,KAAK,IAAI,IAAI,IAAI,CAACR,OAAO,CAACS,KAAK,KAAK,IAAI;EACzE;EAEAC,UAAU,CAACT,SAAiB,EAAEU,SAAc,EAAEC,WAAgB;IAC5D,IAAIC,GAAQ;IACZ,IAAIC,UAAU,IAAIA,UAAU,CAACC,QAAQ,IAAID,UAAU,CAACC,QAAQ,CAACC,OAAO,EAAE;MACpE;MACAH,GAAG,GAAG,IAAII,GAAG,CAAC,IAAI,CAAClB,QAAQ,EAAEe,UAAU,CAACC,QAAQ,CAACC,OAAO,CAAC;KAC1D,MAAM;MACLH,GAAG,GAAG,IAAII,GAAG,CAAC,IAAI,CAAClB,QAAQ,CAAC;;IAE9Bc,GAAG,CAACK,YAAY,CAACC,MAAM,CAAC,YAAY,EAAEP,WAAW,CAAC;IAElD,MAAMQ,kBAAkB,GAAG,EAAE;IAC7B,MAAMC,WAAW,GAAG,IAAI,IAAI,CAACrB,OAAO,CAACQ,WAAW,CAACK,GAAG,CAACS,QAAQ,EAAE,EAAEF,kBAAkB,CAAC;IACpF,IAAI,CAAClB,UAAU,GAAGmB,WAAW;IAE7B,MAAME,IAAI,GAAG,IAAI;IAEjBF,WAAW,CAACG,MAAM,GAAG;MACnBb,SAAS,CAACc,MAAM,EAAE;IACpB,CAAC;IAEDJ,WAAW,CAACK,OAAO,GAAG,UAAUC,CAAC;MAC/BN,WAAW,CAACO,KAAK,EAAE;MACnBjB,SAAS,CAACkB,OAAO,CAACF,CAAC,CAAC;MACpBhB,SAAS,CAACmB,OAAO,CAAC;QAChBC,IAAI,EAAE,CAAC;QACPC,MAAM,EAAE;OACT,CAAC;IACJ,CAAC;IAEDX,WAAW,CAACY,SAAS,GAAG,UAAUN,CAAC;MACjChB,SAAS,CAACuB,SAAS,CAACP,CAAC,CAACQ,IAAI,CAAC;IAC7B,CAAC;IAEDZ,IAAI,CAACpB,QAAQ,GAAG;MACdQ,SAAS,CAACmB,OAAO,CAAC;QAChBC,IAAI,EAAE,CAAC;QACPC,MAAM,EAAE;OACT,CAAC;IACJ,CAAC;EACH;EAEAJ,KAAK;IACH,IAAI,CAAC1B,UAAU,CAAC0B,KAAK,EAAE;IACvB,IAAI,IAAI,CAACzB,QAAQ,KAAK,IAAI,EAAE;MAC1B,IAAI,CAACA,QAAQ,EAAE;;EAEnB;EAEAiC,IAAI,CAACD,IAAS,EAAEE,OAAe,EAAEC,IAAY;IAC3C,MAAMC,GAAG,GAAG;MACVF,OAAO,EAAEA,OAAO;MAChBC,IAAI,EAAEA,IAAI;MACVH,IAAI,EAAEA;KACP;IACD,MAAMK,OAAO,GAAG;MACd,cAAc,EAAE;KACjB;IACD,MAAMC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACJ,GAAG,CAAC;IAChC,MAAMK,SAAS,GAAG,IAAI,CAAC5C,OAAO,CAACS,KAAK;IACpC,MAAMoC,YAAY,GAAG;MACnBC,MAAM,EAAE,MAAM;MACdN,OAAO,EAAEA,OAAO;MAChBC,IAAI,EAAEA,IAAI;MACVM,IAAI,EAAE,MAAM;MACZC,WAAW,EAAE,aAAa;MAC1BC,KAAK,EAAE;KACR;IACDL,SAAS,CAAC,IAAI,CAAC5C,OAAO,CAACkD,iBAAiB,EAAEL,YAAY,CAAC;EACzD;;AAnGFM","names":["SseTransport","constructor","endpoint","options","_protocol","_transport","_onClose","name","subName","emulation","supported","eventsource","fetch","initialize","callbacks","initialData","url","globalThis","document","baseURI","URL","searchParams","append","eventsourceOptions","eventSource","toString","self","onopen","onOpen","onerror","e","close","onError","onClose","code","reason","onmessage","onMessage","data","send","session","node","req","headers","body","JSON","stringify","fetchFunc","fetchOptions","method","mode","credentials","cache","emulationEndpoint","exports"],"sources":["../src/transport_sse.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}