{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Subscription = void 0;\nconst events_1 = __importDefault(require(\"events\"));\nconst codes_1 = require(\"./codes\");\nconst types_1 = require(\"./types\");\nconst utils_1 = require(\"./utils\");\n/** Subscription to a channel */\nclass Subscription extends events_1.default {\n  /** Subscription constructor should not be used directly, create subscriptions using Client method. */\n  constructor(centrifuge, channel, options) {\n    super();\n    this._resubscribeTimeout = null;\n    this._refreshTimeout = null;\n    this.channel = channel;\n    this.state = types_1.SubscriptionState.Unsubscribed;\n    this._centrifuge = centrifuge;\n    this._token = null;\n    this._getToken = null;\n    this._data = null;\n    this._recover = false;\n    this._offset = null;\n    this._epoch = null;\n    this._recoverable = false;\n    this._positioned = false;\n    this._joinLeave = false;\n    this._minResubscribeDelay = 500;\n    this._maxResubscribeDelay = 20000;\n    this._resubscribeTimeout = null;\n    this._resubscribeAttempts = 0;\n    this._promises = {};\n    this._promiseId = 0;\n    this._inflight = false;\n    this._refreshTimeout = null;\n    this._setOptions(options);\n    // @ts-ignore – we are hiding some symbols from public API autocompletion.\n    if (this._centrifuge._debugEnabled) {\n      this.on('state', ctx => {\n        // @ts-ignore – we are hiding some symbols from public API autocompletion.\n        this._centrifuge._debug('subscription state', channel, ctx.oldState, '->', ctx.newState);\n      });\n      this.on('error', ctx => {\n        // @ts-ignore – we are hiding some symbols from public API autocompletion.\n        this._centrifuge._debug('subscription error', channel, ctx);\n      });\n    } else {\n      // Avoid unhandled exception in EventEmitter for non-set error handler.\n      this.on('error', function () {\n        Function.prototype();\n      });\n    }\n  }\n  /** ready returns a Promise which resolves upon subscription goes to Subscribed\n   * state and rejects in case of subscription goes to Unsubscribed state.\n   * Optional timeout can be passed.*/\n  ready(timeout) {\n    if (this.state === types_1.SubscriptionState.Unsubscribed) {\n      return Promise.reject({\n        code: codes_1.errorCodes.subscriptionUnsubscribed,\n        message: this.state\n      });\n    }\n    if (this.state === types_1.SubscriptionState.Subscribed) {\n      return Promise.resolve();\n    }\n    return new Promise((res, rej) => {\n      const ctx = {\n        resolve: res,\n        reject: rej\n      };\n      if (timeout) {\n        ctx.timeout = setTimeout(function () {\n          rej({\n            code: codes_1.errorCodes.timeout,\n            message: 'timeout'\n          });\n        }, timeout);\n      }\n      this._promises[this._nextPromiseId()] = ctx;\n    });\n  }\n  /** subscribe to a channel.*/\n  subscribe() {\n    if (this._isSubscribed()) {\n      return;\n    }\n    this._resubscribeAttempts = 0;\n    this._setSubscribing(codes_1.subscribingCodes.subscribeCalled, 'subscribe called');\n  }\n  /** unsubscribe from a channel, keeping position state.*/\n  unsubscribe() {\n    this._setUnsubscribed(codes_1.unsubscribedCodes.unsubscribeCalled, 'unsubscribe called', true);\n  }\n  /** publish data to a channel.*/\n  publish(data) {\n    const self = this;\n    return this._methodCall().then(function () {\n      return self._centrifuge.publish(self.channel, data);\n    });\n  }\n  /** get online presence for a channel.*/\n  presence() {\n    const self = this;\n    return this._methodCall().then(function () {\n      return self._centrifuge.presence(self.channel);\n    });\n  }\n  /** presence stats for a channel (num clients and unique users).*/\n  presenceStats() {\n    const self = this;\n    return this._methodCall().then(function () {\n      return self._centrifuge.presenceStats(self.channel);\n    });\n  }\n  /** history for a channel. By default it does not return publications (only current\n   *  StreamPosition data) – provide an explicit limit > 0 to load publications.*/\n  history(opts) {\n    const self = this;\n    return this._methodCall().then(function () {\n      return self._centrifuge.history(self.channel, opts);\n    });\n  }\n  _methodCall() {\n    if (this._isSubscribed()) {\n      return Promise.resolve();\n    }\n    if (this._isUnsubscribed()) {\n      return Promise.reject({\n        code: codes_1.errorCodes.subscriptionUnsubscribed,\n        message: this.state\n      });\n    }\n    return new Promise((res, rej) => {\n      const timeout = setTimeout(function () {\n        rej({\n          code: codes_1.errorCodes.timeout,\n          message: 'timeout'\n        });\n        // @ts-ignore – we are hiding some symbols from public API autocompletion.\n      }, this._centrifuge._config.timeout);\n      this._promises[this._nextPromiseId()] = {\n        timeout: timeout,\n        resolve: res,\n        reject: rej\n      };\n    });\n  }\n  _nextPromiseId() {\n    return ++this._promiseId;\n  }\n  _needRecover() {\n    return this._recover === true;\n  }\n  _isUnsubscribed() {\n    return this.state === types_1.SubscriptionState.Unsubscribed;\n  }\n  _isSubscribing() {\n    return this.state === types_1.SubscriptionState.Subscribing;\n  }\n  _isSubscribed() {\n    return this.state === types_1.SubscriptionState.Subscribed;\n  }\n  _setState(newState) {\n    if (this.state !== newState) {\n      const oldState = this.state;\n      this.state = newState;\n      this.emit('state', {\n        newState,\n        oldState,\n        channel: this.channel\n      });\n      return true;\n    }\n    return false;\n  }\n  _usesToken() {\n    return this._token !== null || this._getToken !== null;\n  }\n  _clearSubscribingState() {\n    this._resubscribeAttempts = 0;\n    this._clearResubscribeTimeout();\n  }\n  _clearSubscribedState() {\n    this._clearRefreshTimeout();\n  }\n  _setSubscribed(result) {\n    if (!this._isSubscribing()) {\n      return;\n    }\n    this._clearSubscribingState();\n    if (result.recoverable) {\n      this._recover = true;\n      this._offset = result.offset || 0;\n      this._epoch = result.epoch || '';\n    }\n    this._setState(types_1.SubscriptionState.Subscribed);\n    // @ts-ignore – we are hiding some methods from public API autocompletion.\n    const ctx = this._centrifuge._getSubscribeContext(this.channel, result);\n    this.emit('subscribed', ctx);\n    this._resolvePromises();\n    const pubs = result.publications;\n    if (pubs && pubs.length > 0) {\n      for (const i in pubs) {\n        if (!pubs.hasOwnProperty(i)) {\n          continue;\n        }\n        this._handlePublication(pubs[i]);\n      }\n    }\n    if (result.expires === true) {\n      this._refreshTimeout = setTimeout(() => this._refresh(), (0, utils_1.ttlMilliseconds)(result.ttl));\n    }\n  }\n  _setSubscribing(code, reason) {\n    if (this._isSubscribing()) {\n      return;\n    }\n    if (this._isSubscribed()) {\n      this._clearSubscribedState();\n    }\n    if (this._setState(types_1.SubscriptionState.Subscribing)) {\n      this.emit('subscribing', {\n        channel: this.channel,\n        code: code,\n        reason: reason\n      });\n    }\n    this._subscribe(false, false);\n  }\n  _subscribe(optimistic, skipSending) {\n    // @ts-ignore – we are hiding some symbols from public API autocompletion.\n    this._centrifuge._debug('subscribing on', this.channel);\n    if (this._centrifuge.state !== types_1.State.Connected && !optimistic) {\n      // @ts-ignore – we are hiding some symbols from public API autocompletion.\n      this._centrifuge._debug('delay subscribe on', this.channel, 'till connected');\n      // subscribe will be called later automatically.\n      return null;\n    }\n    if (this._usesToken()) {\n      // token channel, need to get token before sending subscribe.\n      if (this._token) {\n        return this._sendSubscribe(this._token, skipSending);\n      } else {\n        if (optimistic) {\n          return null;\n        }\n        const self = this;\n        this._getSubscriptionToken().then(function (token) {\n          if (!self._isSubscribing()) {\n            return;\n          }\n          if (!token) {\n            self._failUnauthorized();\n            return;\n          }\n          self._token = token;\n          self._sendSubscribe(token, false);\n        }).catch(function (e) {\n          if (!self._isSubscribing()) {\n            return;\n          }\n          self.emit('error', {\n            type: 'subscribeToken',\n            channel: self.channel,\n            error: {\n              code: codes_1.errorCodes.subscriptionSubscribeToken,\n              message: e !== undefined ? e.toString() : ''\n            }\n          });\n          self._scheduleResubscribe();\n        });\n        return null;\n      }\n    } else {\n      return this._sendSubscribe('', skipSending);\n    }\n  }\n  _sendSubscribe(token, skipSending) {\n    const channel = this.channel;\n    const req = {\n      channel: channel\n    };\n    if (token) {\n      req.token = token;\n    }\n    if (this._data) {\n      req.data = this._data;\n    }\n    if (this._positioned) {\n      req.positioned = true;\n    }\n    if (this._recoverable) {\n      req.recoverable = true;\n    }\n    if (this._joinLeave) {\n      req.join_leave = true;\n    }\n    if (this._needRecover()) {\n      req.recover = true;\n      const offset = this._getOffset();\n      if (offset) {\n        req.offset = offset;\n      }\n      const epoch = this._getEpoch();\n      if (epoch) {\n        req.epoch = epoch;\n      }\n    }\n    const cmd = {\n      subscribe: req\n    };\n    this._inflight = true;\n    // @ts-ignore – we are hiding some symbols from public API autocompletion.\n    this._centrifuge._call(cmd, skipSending).then(resolveCtx => {\n      this._inflight = false;\n      // @ts-ignore - improve later.\n      const result = resolveCtx.reply.subscribe;\n      this._handleSubscribeResponse(result);\n      // @ts-ignore - improve later.\n      if (resolveCtx.next) {\n        // @ts-ignore - improve later.\n        resolveCtx.next();\n      }\n    }, rejectCtx => {\n      this._inflight = false;\n      this._handleSubscribeError(rejectCtx.error);\n      if (rejectCtx.next) {\n        rejectCtx.next();\n      }\n    });\n    return cmd;\n  }\n  _handleSubscribeError(error) {\n    if (!this._isSubscribing()) {\n      return;\n    }\n    if (error.code === codes_1.errorCodes.timeout) {\n      // @ts-ignore – we are hiding some symbols from public API autocompletion.\n      this._centrifuge._disconnect(codes_1.connectingCodes.subscribeTimeout, 'subscribe timeout', true);\n      return;\n    }\n    this._subscribeError(error);\n  }\n  _handleSubscribeResponse(result) {\n    if (!this._isSubscribing()) {\n      return;\n    }\n    this._setSubscribed(result);\n  }\n  _setUnsubscribed(code, reason, sendUnsubscribe) {\n    if (this._isUnsubscribed()) {\n      return;\n    }\n    if (this._isSubscribed()) {\n      if (sendUnsubscribe) {\n        // @ts-ignore – we are hiding some methods from public API autocompletion.\n        this._centrifuge._unsubscribe(this);\n      }\n      this._clearSubscribedState();\n    }\n    if (this._isSubscribing()) {\n      this._clearSubscribingState();\n    }\n    if (this._setState(types_1.SubscriptionState.Unsubscribed)) {\n      this.emit('unsubscribed', {\n        channel: this.channel,\n        code: code,\n        reason: reason\n      });\n    }\n    this._rejectPromises({\n      code: codes_1.errorCodes.subscriptionUnsubscribed,\n      message: this.state\n    });\n  }\n  _handlePublication(pub) {\n    // @ts-ignore – we are hiding some methods from public API autocompletion.\n    const ctx = this._centrifuge._getPublicationContext(this.channel, pub);\n    this.emit('publication', ctx);\n    if (pub.offset) {\n      this._offset = pub.offset;\n    }\n  }\n  _handleJoin(join) {\n    // @ts-ignore – we are hiding some methods from public API autocompletion.\n    const info = this._centrifuge._getJoinLeaveContext(join.info);\n    this.emit('join', {\n      channel: this.channel,\n      info: info\n    });\n  }\n  _handleLeave(leave) {\n    // @ts-ignore – we are hiding some methods from public API autocompletion.\n    const info = this._centrifuge._getJoinLeaveContext(leave.info);\n    this.emit('leave', {\n      channel: this.channel,\n      info: info\n    });\n  }\n  _resolvePromises() {\n    for (const id in this._promises) {\n      if (this._promises[id].timeout) {\n        clearTimeout(this._promises[id].timeout);\n      }\n      this._promises[id].resolve();\n      delete this._promises[id];\n    }\n  }\n  _rejectPromises(err) {\n    for (const id in this._promises) {\n      if (this._promises[id].timeout) {\n        clearTimeout(this._promises[id].timeout);\n      }\n      this._promises[id].reject(err);\n      delete this._promises[id];\n    }\n  }\n  _scheduleResubscribe() {\n    const self = this;\n    const delay = this._getResubscribeDelay();\n    this._resubscribeTimeout = setTimeout(function () {\n      if (self._isSubscribing()) {\n        self._subscribe(false, false);\n      }\n    }, delay);\n  }\n  _subscribeError(err) {\n    if (!this._isSubscribing()) {\n      return;\n    }\n    if (err.code < 100 || err.code === 109 || err.temporary === true) {\n      if (err.code === 109) {\n        // Token expired error.\n        this._token = null;\n      }\n      const errContext = {\n        channel: this.channel,\n        type: 'subscribe',\n        error: err\n      };\n      if (this._centrifuge.state === types_1.State.Connected) {\n        this.emit('error', errContext);\n      }\n      this._scheduleResubscribe();\n    } else {\n      this._setUnsubscribed(err.code, err.message, false);\n    }\n  }\n  _getResubscribeDelay() {\n    const delay = (0, utils_1.backoff)(this._resubscribeAttempts, this._minResubscribeDelay, this._maxResubscribeDelay);\n    this._resubscribeAttempts++;\n    return delay;\n  }\n  _setOptions(options) {\n    if (!options) {\n      return;\n    }\n    if (options.since) {\n      this._offset = options.since.offset;\n      this._epoch = options.since.epoch;\n      this._recover = true;\n    }\n    if (options.data) {\n      this._data = options.data;\n    }\n    if (options.minResubscribeDelay !== undefined) {\n      this._minResubscribeDelay = options.minResubscribeDelay;\n    }\n    if (options.maxResubscribeDelay !== undefined) {\n      this._maxResubscribeDelay = options.maxResubscribeDelay;\n    }\n    if (options.token) {\n      this._token = options.token;\n    }\n    if (options.getToken) {\n      this._getToken = options.getToken;\n    }\n    if (options.positioned === true) {\n      this._positioned = true;\n    }\n    if (options.recoverable === true) {\n      this._recoverable = true;\n    }\n    if (options.joinLeave === true) {\n      this._joinLeave = true;\n    }\n  }\n  _getOffset() {\n    const offset = this._offset;\n    if (offset !== null) {\n      return offset;\n    }\n    return 0;\n  }\n  _getEpoch() {\n    const epoch = this._epoch;\n    if (epoch !== null) {\n      return epoch;\n    }\n    return '';\n  }\n  _clearRefreshTimeout() {\n    if (this._refreshTimeout !== null) {\n      clearTimeout(this._refreshTimeout);\n      this._refreshTimeout = null;\n    }\n  }\n  _clearResubscribeTimeout() {\n    if (this._resubscribeTimeout !== null) {\n      clearTimeout(this._resubscribeTimeout);\n      this._resubscribeTimeout = null;\n    }\n  }\n  _getSubscriptionToken() {\n    // @ts-ignore – we are hiding some methods from public API autocompletion.\n    this._centrifuge._debug('get subscription token for channel', this.channel);\n    const ctx = {\n      channel: this.channel\n    };\n    const getToken = this._getToken;\n    if (getToken === null) {\n      throw new Error('provide a function to get channel subscription token');\n    }\n    return getToken(ctx);\n  }\n  _refresh() {\n    this._clearRefreshTimeout();\n    const self = this;\n    this._getSubscriptionToken().then(function (token) {\n      if (!self._isSubscribed()) {\n        return;\n      }\n      if (!token) {\n        self._failUnauthorized();\n        return;\n      }\n      self._token = token;\n      const req = {\n        channel: self.channel,\n        token: token\n      };\n      const msg = {\n        'sub_refresh': req\n      };\n      // @ts-ignore – we are hiding some symbols from public API autocompletion.\n      self._centrifuge._call(msg).then(resolveCtx => {\n        // @ts-ignore - improve later.\n        const result = resolveCtx.reply.sub_refresh;\n        self._refreshResponse(result);\n        // @ts-ignore - improve later.\n        if (resolveCtx.next) {\n          // @ts-ignore - improve later.\n          resolveCtx.next();\n        }\n      }, rejectCtx => {\n        self._refreshError(rejectCtx.error);\n        if (rejectCtx.next) {\n          rejectCtx.next();\n        }\n      });\n    }).catch(function (e) {\n      self.emit('error', {\n        type: 'refreshToken',\n        channel: self.channel,\n        error: {\n          code: codes_1.errorCodes.subscriptionRefreshToken,\n          message: e !== undefined ? e.toString() : ''\n        }\n      });\n      self._refreshTimeout = setTimeout(() => self._refresh(), self._getRefreshRetryDelay());\n    });\n  }\n  _refreshResponse(result) {\n    if (!this._isSubscribed()) {\n      return;\n    }\n    // @ts-ignore – we are hiding some methods from public API autocompletion.\n    this._centrifuge._debug('subscription token refreshed, channel', this.channel);\n    this._clearRefreshTimeout();\n    if (result.expires === true) {\n      this._refreshTimeout = setTimeout(() => this._refresh(), (0, utils_1.ttlMilliseconds)(result.ttl));\n    }\n  }\n  _refreshError(err) {\n    if (!this._isSubscribed()) {\n      return;\n    }\n    if (err.code < 100 || err.temporary === true) {\n      this.emit('error', {\n        type: 'refresh',\n        channel: this.channel,\n        error: err\n      });\n      this._refreshTimeout = setTimeout(() => this._refresh(), this._getRefreshRetryDelay());\n    } else {\n      this._setUnsubscribed(err.code, err.message, true);\n    }\n  }\n  _getRefreshRetryDelay() {\n    return (0, utils_1.backoff)(0, 10000, 20000);\n  }\n  _failUnauthorized() {\n    this._setUnsubscribed(codes_1.unsubscribedCodes.unauthorized, 'unauthorized', true);\n  }\n}\nexports.Subscription = Subscription;","map":{"version":3,"mappings":"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","names":["Subscription","events_1","constructor","centrifuge","channel","options","state","types_1","Unsubscribed","_centrifuge","_token","_getToken","_data","_recover","_offset","_epoch","_recoverable","_positioned","_joinLeave","_minResubscribeDelay","_maxResubscribeDelay","_resubscribeTimeout","_resubscribeAttempts","_promises","_promiseId","_inflight","_refreshTimeout","_setOptions","_debugEnabled","on","ctx","_debug","oldState","newState","Function","prototype","ready","timeout","Promise","reject","code","codes_1","subscriptionUnsubscribed","message","Subscribed","resolve","res","rej","setTimeout","_nextPromiseId","subscribe","_isSubscribed","_setSubscribing","subscribeCalled","unsubscribe","_setUnsubscribed","unsubscribeCalled","publish","data","self","_methodCall","then","presence","presenceStats","history","opts","_isUnsubscribed","_config","_needRecover","_isSubscribing","Subscribing","_setState","emit","_usesToken","_clearSubscribingState","_clearResubscribeTimeout","_clearSubscribedState","_clearRefreshTimeout","_setSubscribed","result","recoverable","offset","epoch","_getSubscribeContext","_resolvePromises","pubs","publications","length","i","hasOwnProperty","_handlePublication","expires","_refresh","ttl","reason","_subscribe","optimistic","skipSending","Connected","_sendSubscribe","_getSubscriptionToken","token","_failUnauthorized","catch","e","type","error","subscriptionSubscribeToken","undefined","toString","_scheduleResubscribe","req","positioned","join_leave","recover","_getOffset","_getEpoch","cmd","_call","resolveCtx","reply","_handleSubscribeResponse","next","rejectCtx","_handleSubscribeError","_disconnect","subscribeTimeout","_subscribeError","sendUnsubscribe","_unsubscribe","_rejectPromises","pub","_getPublicationContext","_handleJoin","join","info","_getJoinLeaveContext","_handleLeave","leave","id","clearTimeout","err","delay","_getResubscribeDelay","temporary","errContext","since","minResubscribeDelay","maxResubscribeDelay","getToken","joinLeave","Error","msg","sub_refresh","_refreshResponse","_refreshError","subscriptionRefreshToken","_getRefreshRetryDelay","unauthorized","exports"],"sources":["../src/subscription.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}